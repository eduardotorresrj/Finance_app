#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üß™ TESTE DO SISTEMA DE REDEFINI√á√ÉO DE SENHA
Script para testar se o sistema est√° funcionando corretamente
"""

import sys
import os

# Adicionar o diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_email_system():
    """Testa o sistema de email"""
    print("üìß TESTANDO SISTEMA DE EMAIL")
    print("=" * 50)
    
    try:
        from email_working import send_verification_email
        print("‚úÖ Importa√ß√£o do email_working OK")
        
        # Teste de envio
        test_email = "teste@exemplo.com"
        test_code = "123456"
        
        result = send_verification_email(test_email, test_code)
        print(f"‚úÖ Resultado do envio: {result}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no sistema de email: {e}")
        return False

def test_app_imports():
    """Testa as importa√ß√µes do app.py"""
    print("\nüîß TESTANDO IMPORTA√á√ïES DO APP")
    print("=" * 50)
    
    try:
        # Testar importa√ß√µes b√°sicas
        import secrets
        print("‚úÖ secrets OK")
        
        import smtplib
        print("‚úÖ smtplib OK")
        
        from email.mime.text import MIMEText
        print("‚úÖ MIMEText OK")
        
        from email.mime.multipart import MIMEMultipart
        print("‚úÖ MIMEMultipart OK")
        
        # Testar importa√ß√£o do Flask
        from flask import Flask, session
        print("‚úÖ Flask OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro nas importa√ß√µes: {e}")
        return False

def test_database():
    """Testa a conex√£o com o banco de dados"""
    print("\nüóÑÔ∏è TESTANDO BANCO DE DADOS")
    print("=" * 50)
    
    try:
        from app import db, User
        
        # Verificar se o banco existe
        if os.path.exists('finance.db'):
            print("‚úÖ Arquivo do banco existe")
        else:
            print("‚ö†Ô∏è Arquivo do banco n√£o existe")
        
        # Tentar conectar
        try:
            # Criar contexto da aplica√ß√£o
            from app import app
            with app.app_context():
                # Tentar fazer uma consulta simples
                users = User.query.all()
                print(f"‚úÖ Conex√£o OK - {len(users)} usu√°rios encontrados")
                
                # Verificar se h√° usu√°rios com email
                users_with_email = User.query.filter(User.email.isnot(None)).all()
                print(f"‚úÖ {len(users_with_email)} usu√°rios com email cadastrado")
                
                return True
                
        except Exception as e:
            print(f"‚ùå Erro na conex√£o: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao importar m√≥dulos do banco: {e}")
        return False

def test_password_reset_flow():
    """Testa o fluxo completo de redefini√ß√£o de senha"""
    print("\nüîÑ TESTANDO FLUXO DE REDEFINI√á√ÉO")
    print("=" * 50)
    
    try:
        from app import app, User, password_reset_codes, cleanup_expired_codes
        from datetime import datetime, timedelta
        import secrets
        
        with app.app_context():
            # 1. Limpar c√≥digos expirados
            cleanup_expired_codes()
            print("‚úÖ Limpeza de c√≥digos expirados OK")
            
            # 2. Verificar se h√° usu√°rios
            users = User.query.filter(User.email.isnot(None)).all()
            if not users:
                print("‚ö†Ô∏è Nenhum usu√°rio com email encontrado")
                print("üí° Crie um usu√°rio com email primeiro")
                return False
            
            test_user = users[0]
            print(f"‚úÖ Usu√°rio de teste: {test_user.username} ({test_user.email})")
            
            # 3. Gerar c√≥digo de teste
            verification_code = ''.join([str(secrets.randbelow(10)) for _ in range(6)])
            expiry = datetime.now() + timedelta(minutes=15)
            
            password_reset_codes[verification_code] = {
                'user_id': test_user.id,
                'email': test_user.email,
                'expiry': expiry
            }
            print(f"‚úÖ C√≥digo gerado: {verification_code}")
            
            # 4. Verificar se o c√≥digo foi armazenado
            if verification_code in password_reset_codes:
                print("‚úÖ C√≥digo armazenado corretamente")
            else:
                print("‚ùå Erro ao armazenar c√≥digo")
                return False
            
            # 5. Simular verifica√ß√£o
            code_data = password_reset_codes[verification_code]
            if code_data['user_id'] == test_user.id:
                print("‚úÖ Verifica√ß√£o do c√≥digo OK")
            else:
                print("‚ùå Erro na verifica√ß√£o do c√≥digo")
                return False
            
            # 6. Limpar c√≥digo de teste
            del password_reset_codes[verification_code]
            print("‚úÖ Limpeza do c√≥digo de teste OK")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erro no fluxo de redefini√ß√£o: {e}")
        return False

def test_templates():
    """Testa se os templates existem"""
    print("\nüìÑ TESTANDO TEMPLATES")
    print("=" * 50)
    
    templates = [
        'templates/forgot_password.html',
        'templates/verify_code.html',
        'templates/reset_password.html'
    ]
    
    all_exist = True
    for template in templates:
        if os.path.exists(template):
            print(f"‚úÖ {template}")
        else:
            print(f"‚ùå {template} - N√ÉO ENCONTRADO")
            all_exist = False
    
    return all_exist

def main():
    """Fun√ß√£o principal de teste"""
    print("üß™ TESTE COMPLETO DO SISTEMA DE REDEFINI√á√ÉO DE SENHA")
    print("=" * 60)
    
    tests = [
        ("Sistema de Email", test_email_system),
        ("Importa√ß√µes do App", test_app_imports),
        ("Banco de Dados", test_database),
        ("Fluxo de Redefini√ß√£o", test_password_reset_flow),
        ("Templates", test_templates)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erro no teste {test_name}: {e}")
            results.append((test_name, False))
    
    # Resumo
    print("\nüìä RESUMO DOS TESTES")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ RESULTADO: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ SISTEMA FUNCIONANDO PERFEITAMENTE!")
        print("\nüí° Para testar no navegador:")
        print("1. Execute: python app.py")
        print("2. Acesse: http://127.0.0.1:5000")
        print("3. Fa√ßa login ‚Üí Logout ‚Üí Esqueci a senha")
        print("4. Digite um email cadastrado")
        print("5. O c√≥digo aparecer√° na tela")
    else:
        print("‚ö†Ô∏è ALGUNS PROBLEMAS ENCONTRADOS")
        print("\nüîß Verifique:")
        print("1. Se todos os arquivos est√£o presentes")
        print("2. Se o banco de dados foi criado")
        print("3. Se h√° usu√°rios com email cadastrado")
        print("4. Se todas as depend√™ncias est√£o instaladas")

if __name__ == "__main__":
    main() 