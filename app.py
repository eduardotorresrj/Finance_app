from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, make_response, session
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime, timedelta, date
import json
import re
import unicodedata
import plotly.graph_objs as go
import plotly.utils
import os

def format_currency(value):
    """Formata valor monet√°rio com v√≠rgulas como separadores de milhares"""
    if value is None:
        return "R$ 0,00"
    # Formata o n√∫mero com v√≠rgulas como separadores de milhares
    formatted = f"{value:,.2f}"
    # Substitui v√≠rgulas por pontos e pontos por v√≠rgulas (padr√£o brasileiro)
    formatted = formatted.replace(",", "X").replace(".", ",").replace("X", ".")
    return f"R$ {formatted}"

# ===================== Utilidades de IA =====================
def _strip_accents(text: str) -> str:
    if not text:
        return ''
    return ''.join(c for c in unicodedata.normalize('NFD', text) if unicodedata.category(c) != 'Mn')

def normalize_text(text: str) -> str:
    """Normaliza texto: min√∫sculas, sem acentos e com espa√ßos colapsados."""
    if not text:
        return ''
    lowered = text.lower().strip()
    no_accents = _strip_accents(lowered)
    return re.sub(r"\s+", " ", no_accents)

def _parse_number_ptbr(token: str) -> float | None:
    """Converte strings tipo '1.234,56', '3,5k', '2 mil', '1m' em float (R$)."""
    if not token:
        return None
    t = token.strip().lower()
    t = t.replace('r$', '').replace(' ', '')
    multiplier = 1.0
    # Sufixos comuns
    if t.endswith('k'):
        multiplier = 1_000.0
        t = t[:-1]
    elif t.endswith('mi') or t.endswith('m'):
        multiplier = 1_000_000.0
        t = t[:-2] if t.endswith('mi') else t[:-1]
    elif t.endswith('b') or t.endswith('bi'):
        multiplier = 1_000_000_000.0
        t = t[:-1] if t.endswith('b') else t[:-2]
    # Palavras
    if 'milhao' in t:
        multiplier = 1_000_000.0
        t = t.replace('milhao', '')
    if 'bilhao' in t:
        multiplier = 1_000_000_000.0
        t = t.replace('bilhao', '')
    if 'mil' in t:
        multiplier = max(multiplier, 1_000.0)
        t = t.replace('mil', '')
    # Padr√£o pt-BR 1.234,56 -> 1234.56
    t = t.replace('.', '').replace(',', '.')
    try:
        base = float(t)
        return base * multiplier
    except Exception:
        return None

def extract_entities_from_question(question_text: str) -> dict:
    """Extrai valores monet√°rios, percentuais e prazos (meses/anos) da pergunta normalizada."""
    text = normalize_text(question_text)
    entities: dict[str, list] = {
        'amounts': [],  # valores monet√°rios identificados
        'percents': [], # percentuais (0-100)
        'months': []    # prazos em meses
    }
    # R$ e n√∫meros soltos
    for match in re.findall(r"r?\$?\s*([0-9][0-9\.,]*)\s*(k|mi|m|b|bi|mil|milhao|bilhao)?", text):
        number_token = match[0]
        suffix = match[1] or ''
        value = _parse_number_ptbr(number_token + suffix)
        if value is not None:
            entities['amounts'].append(value)
    # Percentuais
    for match in re.findall(r"([0-9]+(?:[\.,][0-9]+)?)\s*%", text):
        try:
            p = float(match.replace(',', '.'))
            if 0 <= p <= 100:
                entities['percents'].append(p)
        except Exception:
            pass
    # Prazos: meses/anos/semanas
    for match in re.findall(r"(\d+)\s*(mes|meses|ano|anos|semana|semanas)", text):
        qty = int(match[0])
        unit = match[1]
        if unit.startswith('ano'):
            entities['months'].append(qty * 12)
        elif unit.startswith('semana'):
            # aproxima√ß√£o: 1 m√™s ~ 4 semanas
            entities['months'].append(max(1, qty // 4))
        else:
            entities['months'].append(qty)
    return entities

# Gloss√°rio financeiro resumido (pt-BR)
FIN_GLOSSARY = {
    'cdi': 'CDI (Certificado de Dep√≥sito Interbanc√°rio): taxa de refer√™ncia da renda fixa no Brasil. Muitos investimentos p√≥s-fixados rendem um percentual do CDI.',
    'selic': 'SELIC: taxa b√°sica de juros da economia. Tesouro Selic acompanha essa taxa e tem alta liquidez e baixo risco.',
    'ipca': 'IPCA: √≠ndice oficial de infla√ß√£o. T√≠tulos atrelados ao IPCA (Tesouro IPCA+) protegem o poder de compra no longo prazo.',
    'tesouro selic': 'Tesouro Selic: t√≠tulo p√∫blico p√≥s-fixado ligado √† SELIC, indicado para reserva de emerg√™ncia. Incide IR pela tabela regressiva (22,5% a 15%).',
    'tesouro ipca+': 'Tesouro IPCA+: t√≠tulo p√∫blico h√≠brido (IPCA + taxa real). Bom para objetivos de m√©dio/longo prazo. Tem marca√ß√£o a mercado.',
    'cdb': 'CDB: t√≠tulo de renda fixa emitido por bancos. Pode ser p√≥s-fixado (CDI), prefixado ou IPCA+. Cobertura do FGC at√© limites vigentes.',
    'lci': 'LCI: Letra de Cr√©dito Imobili√°rio. Isenta de IR para pessoa f√≠sica, lastreada no setor imobili√°rio. Geralmente tem car√™ncia.',
    'lca': 'LCA: Letra de Cr√©dito do Agroneg√≥cio. Isenta de IR para pessoa f√≠sica, lastreada no agroneg√≥cio. Geralmente com car√™ncia.',
    'debentures incentivadas': 'Deb√™ntures incentivadas: t√≠tulos de empresas com isen√ß√£o de IR (PF) quando enquadradas em projetos de infraestrutura.',
    'reserva de emergencia': 'Reserva de emerg√™ncia: dinheiro para imprevistos (ideal: 6 meses de despesas) em produtos de alta liquidez e baixo risco (ex.: Tesouro Selic).',
    'renda fixa': 'Renda fixa: investimentos com regras de remunera√ß√£o definidas (ex.: Tesouro, CDB, LCI/LCA).',
    'renda variavel': 'Renda vari√°vel: ativos cujo pre√ßo pode oscilar (ex.: a√ß√µes, ETFs). Risco e retorno maiores no longo prazo.',
}

def enrich_response_for_clarity(raw_text: str,
                                summary: dict,
                                intents: list[str],
                                entities: dict,
                                profile,
                                glossary_hits: list[str]) -> str:
    """Anexa um resumo claro, termos e checklist pr√°tico para tornar a resposta mais did√°tica."""
    income = summary.get('income', 0.0)
    expense = summary.get('expense', 0.0)
    balance = summary.get('balance', 0.0)
    savings_rate = summary.get('savings_rate', 0.0)

    # Determinar prioridade principal
    if balance < 0:
        priority = "Sair do vermelho e estabilizar o fluxo de caixa"
    elif savings_rate < 10:
        priority = "Elevar poupan√ßa para pelo menos 10%"
    else:
        priority = "Otimizar or√ßamento e investir com disciplina"

    # TL;DR
    tldr_lines = [
        "üìå Resumo r√°pido (TL;DR)",
        f"- Receitas: {format_currency(income)} | Despesas: {format_currency(expense)} | Saldo: {format_currency(balance)}",
        f"- Taxa de poupan√ßa estimada: {savings_rate:.1f}%",
        f"- Prioridade: {priority}",
        ""
    ]

    # Checklist pr√°tico por inten√ß√£o
    top_intent = intents[0] if intents else 'ajuda'
    checklist: list[str] = ["‚úÖ Plano de a√ß√£o (passo a passo)"]
    if top_intent == 'd√≠vida':
        checklist += [
            "- Hoje: Liste todas as d√≠vidas (valor/juros), pague o m√≠nimo e cancele cart√µes extras",
            "- 7 dias: Negocie taxas/prazos; concentre excedente na menor d√≠vida (bola de neve)",
            "- 30 dias: Corte 10-20% das despesas vari√°veis e crie reserva inicial"
        ]
    elif top_intent == 'investimento':
        checklist += [
            "- Hoje: Defina horizonte (meses) e perfil (conservador/moderado/arrojado)",
            "- 7 dias: Abra/valide conta em corretora e simule aloca√ß√µes por perfil",
            "- 30 dias: Inicie aportes mensais autom√°ticos (DCA) com revis√£o trimestral"
        ]
    elif top_intent == 'poupan√ßa':
        checklist += [
            "- Hoje: Automatize 10-20% do sal√°rio para conta de reserva",
            "- 7 dias: Reduza 2-3 gastos recorrentes e limite a maior categoria",
            "- 30 dias: Atingir 1 sal√°rio de reserva (meta incremental)"
        ]
    elif top_intent == 'gasto':
        checklist += [
            "- Hoje: Bloqueie compras por impulso e cancele assinaturas pouco usadas",
            "- 7 dias: Reprecifique contas (telefone/internet/seguros)",
            "- 30 dias: Estabele√ßa tetos por categoria e monitore semanalmente"
        ]
    elif top_intent == 'or√ßamento':
        checklist += [
            "- Hoje: Adote 50/30/20 como base (ou varia√ß√£o adequada)",
            "- 7 dias: Ajuste limites por categoria no app",
            "- 30 dias: Revis√£o e corre√ß√£o de desvios"
        ]
    else:
        checklist += [
            "- Hoje: Defina objetivo, valor e prazo",
            "- 7 dias: Liste a√ß√µes e recursos necess√°rios",
            "- 30 dias: Revise progresso e ajuste a estrat√©gia"
        ]
    checklist.append("")

    # Termos usados (gloss√°rio)
    terms_lines = []
    extra_terms = []
    if top_intent == 'investimento':
        extra_terms = ['cdi', 'selic', 'ipca', 'tesouro selic', 'tesouro ipca+']
    if top_intent == 'imposto':
        extra_terms += ['ipca', 'cdi']
    explain_terms = list(dict.fromkeys((glossary_hits or []) + extra_terms))[:6]
    if explain_terms:
        terms_lines.append("üìñ Explica√ß√£o simples (termos)")
        for t in explain_terms:
            desc = FIN_GLOSSARY.get(t)
            if desc:
                terms_lines.append(f"- {t.title()}: {desc}")
        terms_lines.append("")

    # Perguntas sugeridas (para continuar)
    suggestions = [
        "‚ùì Perguntas sugeridas",
        "- Quer que eu gere um plano mensal detalhado com metas SMART?",
        "- Deseja que eu simule cen√°rios com 10%, 20% e 30% de poupan√ßa?",
        "- Posso sugerir cortes por categoria com impacto estimado?",
        ""
    ]

    # Montar resposta final
    final_parts = []
    final_parts.extend(tldr_lines)
    final_parts.append(raw_text.strip())
    final_parts.append("")
    final_parts.extend(checklist)
    if terms_lines:
        final_parts.extend(terms_lines)
    final_parts.extend(suggestions)
    return "\n".join(final_parts)

app = Flask(__name__)

# Configura√ß√£o robusta para Render
def get_database_uri():
    # Tenta v√°rias possibilidades de nome de vari√°vel
    database_url = (
        os.environ.get('DATABASE_URL') or
        os.environ.get('RENDER_DATABASE_URL') or
        os.environ.get('POSTGRESQL_URL')
    )
    
    if database_url:
        # Corre√ß√£o ESSENCIAL para formato do Render
        if database_url.startswith('postgres://'):
            database_url = database_url.replace('postgres://', 'postgresql://', 1)
        print(f"‚úÖ Usando PostgreSQL: {database_url[:50]}...")
        return database_url
    
    # Se n√£o encontrar, ERRO (no Render sempre deve ter)
    print("‚ùå DATABASE_URL n√£o encontrada!")
    return 'sqlite:///instance/finance.db'  # Fallback apenas para debug

app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY') or 'dev-key-fallback'
app.config['SQLALCHEMY_DATABASE_URI'] = get_database_uri()
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# SSL para PostgreSQL no Render
if app.config['SQLALCHEMY_DATABASE_URI'].startswith('postgresql://'):
    app.config['SQLALCHEMY_ENGINE_OPTIONS'] = {
        'connect_args': {
            'sslmode': 'require',
            'sslrootcert': '/etc/ssl/certs/ca-certificates.crt'
        }
    }

db = SQLAlchemy(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# Rota para debug
@app.route('/debug')
def debug_info():
    info = {
        'database_uri': app.config['SQLALCHEMY_DATABASE_URI'][:100] + '...' if app.config['SQLALCHEMY_DATABASE_URI'] else 'None',
        'has_database_url': 'DATABASE_URL' in os.environ,
        'all_env_vars': {k: v for k, v in os.environ.items() if 'DATABASE' in k or 'SECRET' in k}
    }
    return info

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(128), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=True)

class Transaction(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    type = db.Column(db.String(10))  # 'income' ou 'expense'
    category = db.Column(db.String(50))
    amount = db.Column(db.Float)
    description = db.Column(db.String(200))
    date = db.Column(db.Date)
    due_date = db.Column(db.Date, nullable=True)
    image_path = db.Column(db.String(200), nullable=True)

# ======== IA Learning: Perfis e Intera√ß√µes ========
class AiProfile(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), unique=True, nullable=False)
    risk_profile = db.Column(db.String(20), default='moderado')  # conservador | moderado | arrojado
    savings_target_pct = db.Column(db.Integer, default=20)  # meta de poupan√ßa
    emergency_months_target = db.Column(db.Integer, default=3)
    avoided_categories_json = db.Column(db.Text, default='[]')  # categorias que o usu√°rio n√£o quer cortar
    focus_counters_json = db.Column(db.Text, default='{}')      # contadores por inten√ß√£o
    total_feedback = db.Column(db.Integer, default=0)
    avg_helpfulness = db.Column(db.Float, default=0.0)
    interaction_count = db.Column(db.Integer, default=0)
    last_updated = db.Column(db.DateTime, default=datetime.utcnow)

class AiInteraction(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    question = db.Column(db.Text, nullable=False)
    intents_json = db.Column(db.Text, default='[]')
    response = db.Column(db.Text, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

def _loads_json_or_default(raw_text: str, default):
    try:
        return json.loads(raw_text) if raw_text else default
    except Exception:
        return default

def _dumps_json_safe(obj) -> str:
    try:
        return json.dumps(obj, ensure_ascii=False)
    except Exception:
        return json.dumps(str(obj))

def get_or_create_ai_profile(user_id: int) -> 'AiProfile':
    profile = AiProfile.query.filter_by(user_id=user_id).first()
    if not profile:
        profile = AiProfile(user_id=user_id)
        db.session.add(profile)
        db.session.commit()
    return profile

def update_profile_on_interaction(profile: 'AiProfile', intents: list, balance: float):
    # Atualiza contadores de foco (poupan√ßa, investimento, d√≠vidas, renda)
    counters = _loads_json_or_default(profile.focus_counters_json, {})
    for intent in intents:
        counters[intent] = counters.get(intent, 0) + 1

    # Ajuste incremental da meta de poupan√ßa
    if 'poupan√ßa' in intents and profile.savings_target_pct < 25:
        profile.savings_target_pct = min(25, profile.savings_target_pct + 1)

    # Aumenta alvo do fundo de emerg√™ncia se a situa√ß√£o estiver negativa
    if balance < 0:
        profile.emergency_months_target = max(profile.emergency_months_target, 6)

    profile.focus_counters_json = _dumps_json_safe(counters)
    profile.interaction_count = (profile.interaction_count or 0) + 1
    profile.last_updated = datetime.utcnow()
    db.session.commit()

def apply_profile_to_allocations(profile: 'AiProfile', base_amount: float) -> dict:
    # Distribui√ß√£o por perfil de risco
    rp = (profile.risk_profile or 'moderado').lower()
    if rp == 'conservador':
        return {
            'liquidez_diaria': base_amount * 0.70,
            'curto_prazo': base_amount * 0.20,
            'diversificados': base_amount * 0.08,
            'oportunidades': base_amount * 0.02,
        }
    elif rp == 'arrojado':
        return {
            'liquidez_diaria': base_amount * 0.40,
            'curto_prazo': base_amount * 0.20,
            'diversificados': base_amount * 0.35,
            'oportunidades': base_amount * 0.05,
        }
    # moderado (default)
    return {
        'liquidez_diaria': base_amount * 0.60,
        'curto_prazo': base_amount * 0.25,
        'diversificados': base_amount * 0.10,
        'oportunidades': base_amount * 0.05,
    }

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route('/')
def index():
    if current_user.is_authenticated:
        return redirect(url_for('dashboard'))
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        user = User.query.filter_by(username=username).first()
        
        if user and check_password_hash(user.password_hash, password):
            login_user(user)
            return redirect(url_for('dashboard'))
        else:
            flash('Usu√°rio ou senha incorretos!')
    
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        email = request.form.get('email', '')
        
        # Verificar se o usu√°rio j√° existe
        if User.query.filter_by(username=username).first():
            flash('Nome de usu√°rio j√° existe!', 'error')
            return render_template('register.html')
        
        # Verificar se o email j√° existe
        if email and User.query.filter_by(email=email).first():
            flash('Email j√° cadastrado!', 'error')
            return render_template('register.html')
        
        # Valida√ß√£o de senha segura
        def validate_password(password):
            """Valida se a senha atende aos crit√©rios de seguran√ßa"""
            if len(password) < 8:
                return False, "A senha deve ter pelo menos 8 caracteres"
            
            if not any(c.isupper() for c in password):
                return False, "A senha deve conter pelo menos uma letra mai√∫scula"
            
            if not any(c.islower() for c in password):
                return False, "A senha deve conter pelo menos uma letra min√∫scula"
            
            if not any(c.isdigit() for c in password):
                return False, "A senha deve conter pelo menos um n√∫mero"
            
            if not any(c in '!@#$%^&*()_+-=[]{}|;:,.<>?' for c in password):
                return False, "A senha deve conter pelo menos um caractere especial (!@#$%^&*()_+-=[]{}|;:,.<>?)"
            
            return True, "Senha v√°lida"
        
        # Validar senha
        is_valid, message = validate_password(password)
        if not is_valid:
            flash(f'Erro na senha: {message}', 'error')
            return render_template('register.html')
        
        # Criar novo usu√°rio
        user = User(
            username=username, 
            password_hash=generate_password_hash(password),
            email=email
        )
        db.session.add(user)
        db.session.commit()
        
        flash('Usu√°rio cadastrado com sucesso!', 'success')
        return redirect(url_for('login'))
    
    return render_template('register.html')

@app.route('/dashboard')
@login_required
def dashboard():
    # Buscar transa√ß√µes do usu√°rio
    transactions = Transaction.query.filter_by(user_id=current_user.id).order_by(Transaction.date.desc()).limit(10).all()
    
    # Calcular saldo
    saldo = get_balance(current_user.id)
    
    # Buscar contas a vencer (pr√≥ximos 7 dias)
    from datetime import date, timedelta
    today = date.today()
    next_week = today + timedelta(days=7)
    
    contas_vencer = Transaction.query.filter(
        Transaction.user_id == current_user.id,
        Transaction.due_date >= today,
        Transaction.due_date <= next_week
    ).order_by(Transaction.due_date).all()
    
    # Criar gr√°fico para o dashboard
    chart_data = create_chart_data(current_user.id, 'monthly', 'both')
    
    response = make_response(render_template('dashboard.html', 
                                           transactions=transactions,
                                           saldo=saldo,
                                           contas_vencer=contas_vencer,
                                           bar_chart=chart_data))
    
    # Adicionar headers para evitar cache
    response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
    response.headers['Pragma'] = 'no-cache'
    response.headers['Expires'] = '0'
    
    return response

@app.route('/add_transaction', methods=['GET', 'POST'])
@login_required
def add_transaction():
    if request.method == 'POST':
        tipo = request.form['type']
        categoria = request.form['category']
        valor = float(request.form['amount'])
        descricao = request.form['description']
        data = datetime.strptime(request.form['date'], '%Y-%m-%d').date()
        
        trans = Transaction(
            user_id=current_user.id, 
            type=tipo, 
            category=categoria, 
            amount=valor, 
            description=descricao, 
            date=data
        )
        db.session.add(trans)
        db.session.commit()
        flash('Transa√ß√£o adicionada!')
        return redirect(url_for('dashboard'))
    return render_template('add_transaction.html')

@app.route('/add_bill', methods=['GET', 'POST'])
@login_required
def add_bill():
    if request.method == 'POST':
        categoria = request.form['category']
        valor = float(request.form['amount'])
        descricao = request.form['description']
        data = datetime.strptime(request.form['date'], '%Y-%m-%d').date()
        vencimento = datetime.strptime(request.form['due_date'], '%Y-%m-%d').date()
        trans = Transaction(user_id=current_user.id, type='expense', category=categoria, amount=valor, description=descricao, date=data, due_date=vencimento)
        db.session.add(trans)
        db.session.commit()
        flash('Conta a vencer cadastrada!')
        return redirect(url_for('dashboard'))
    return render_template('add_bill.html')

# Fun√ß√µes auxiliares
def get_balance(user_id):
    receitas = db.session.query(db.func.sum(Transaction.amount)).filter_by(user_id=user_id, type='income').scalar() or 0
    despesas = db.session.query(db.func.sum(Transaction.amount)).filter_by(user_id=user_id, type='expense').scalar() or 0
    return receitas - despesas

def get_transactions_summary(user_id, timeframe='monthly'):
    today = datetime.now().date()
    
    # Relat√≥rios agora s√£o somente mensais
    start_date = today.replace(day=1)
    
    # Receitas
    total_income = db.session.query(db.func.sum(Transaction.amount)).filter(
        Transaction.user_id == user_id,
        Transaction.type == 'income',
        Transaction.date >= start_date
    ).scalar() or 0
    
    # Despesas
    total_expense = db.session.query(db.func.sum(Transaction.amount)).filter(
        Transaction.user_id == user_id,
        Transaction.type == 'expense',
        Transaction.date >= start_date
    ).scalar() or 0
    
    # Saldo
    balance = total_income - total_expense
    
    return {
        'total_income': total_income,
        'total_expense': total_expense,
        'balance': balance
    }

def create_chart_data(user_id, timeframe='monthly', chart_type='both'):
    today = datetime.now().date()
    
    # Relat√≥rios agora s√£o somente mensais
    start_date = today.replace(day=1)
    
    # Buscar categorias √∫nicas
    categorias = db.session.query(Transaction.category).filter(
        Transaction.user_id == user_id,
        Transaction.date >= start_date
    ).distinct().all()
    categorias = [cat[0] for cat in categorias]
    
    receitas_por_categoria = []
    despesas_por_categoria = []
    
    for categoria in categorias:
        receita = db.session.query(db.func.sum(Transaction.amount)).filter(
            Transaction.user_id == user_id,
            Transaction.type == 'income',
            Transaction.category == categoria,
            Transaction.date >= start_date
        ).scalar() or 0
        
        despesa = db.session.query(db.func.sum(Transaction.amount)).filter(
            Transaction.user_id == user_id,
            Transaction.type == 'expense',
            Transaction.category == categoria,
            Transaction.date >= start_date
        ).scalar() or 0
        
        receitas_por_categoria.append(receita)
        despesas_por_categoria.append(despesa)
    
    # Criar gr√°fico baseado no tipo
    if chart_type == 'income':
        trace = go.Bar(
            x=categorias,
            y=receitas_por_categoria,
            name='Receitas',
            marker_color='green'
        )
        data = [trace]
    elif chart_type == 'expenses':
        trace = go.Bar(
            x=categorias,
            y=despesas_por_categoria,
            name='Despesas',
            marker_color='red'
        )
        data = [trace]
    else:  # both
        trace1 = go.Bar(
            x=categorias,
            y=receitas_por_categoria,
            name='Receitas',
            marker_color='green'
        )
        trace2 = go.Bar(
            x=categorias,
            y=despesas_por_categoria,
            name='Despesas',
            marker_color='red'
        )
        data = [trace1, trace2]
    
    layout = go.Layout(
        title='Receitas vs Despesas por Categoria',
        barmode='group' if chart_type == 'both' else 'stack',
        xaxis=dict(title='Categoria'),
        yaxis=dict(title='Valor (R$)')
    )
    
    return json.dumps({'data': data, 'layout': layout}, cls=plotly.utils.PlotlyJSONEncoder)

def generate_detailed_analysis(user_id, timeframe='monthly'):
    """Gera an√°lise detalhada dos ganhos e gastos do usu√°rio"""
    
    # Calcular per√≠odo atual
    today = date.today()
    # Relat√≥rios agora s√£o somente mensais
    start_date = today.replace(day=1)
    period_days = 30
    
    # Per√≠odo anterior para compara√ß√£o
    prev_start = (start_date - timedelta(days=1)).replace(day=1)
    
    # Dados do per√≠odo atual
    current_transactions = Transaction.query.filter(
        Transaction.user_id == user_id,
        Transaction.date >= start_date
    ).all()
    
    # Dados do per√≠odo anterior
    prev_transactions = Transaction.query.filter(
        Transaction.user_id == user_id,
        Transaction.date >= prev_start,
        Transaction.date < start_date
    ).all()
    
    # Calcular totais atuais
    current_income = sum(t.amount for t in current_transactions if t.type == 'income')
    current_expense = sum(t.amount for t in current_transactions if t.type == 'expense')
    current_balance = current_income - current_expense
    
    # Calcular totais anteriores
    prev_income = sum(t.amount for t in prev_transactions if t.type == 'income')
    prev_expense = sum(t.amount for t in prev_transactions if t.type == 'expense')
    prev_balance = prev_income - prev_expense
    
    # An√°lise por categoria
    expense_categories = {}
    income_categories = {}
    
    for t in current_transactions:
        if t.type == 'expense':
            expense_categories[t.category] = expense_categories.get(t.category, 0) + t.amount
        else:
            income_categories[t.category] = income_categories.get(t.category, 0) + t.amount
    
    # Ordenar categorias por valor
    top_expenses = sorted(expense_categories.items(), key=lambda x: x[1], reverse=True)
    top_incomes = sorted(income_categories.items(), key=lambda x: x[1], reverse=True)
    
    # Gerar an√°lise textual
    analysis = []
    
    # 1. Resumo geral
    analysis.append("üìä **RESUMO FINANCEIRO**")
    analysis.append(f"üí∞ Receitas: R$ {current_income:.2f}")
    analysis.append(f"üí∏ Despesas: R$ {current_expense:.2f}")
    analysis.append(f"üí≥ Saldo: R$ {current_balance:.2f}")
    
    # 2. Compara√ß√£o com per√≠odo anterior
    if prev_income > 0 or prev_expense > 0:
        analysis.append("\nüìà **COMPARA√á√ÉO COM PER√çODO ANTERIOR**")
        
        if prev_income > 0:
            income_change = ((current_income - prev_income) / prev_income) * 100
            if income_change > 0:
                analysis.append(f"‚úÖ Receitas: +{income_change:.1f}% (melhorou)")
            else:
                analysis.append(f"‚ùå Receitas: {income_change:.1f}% (diminuiu)")
        
        if prev_expense > 0:
            expense_change = ((current_expense - prev_expense) / prev_expense) * 100
            if expense_change < 0:
                analysis.append(f"‚úÖ Despesas: {expense_change:.1f}% (reduziu)")
            else:
                analysis.append(f"‚ö†Ô∏è Despesas: +{expense_change:.1f}% (aumentou)")
    
    # 3. An√°lise de despesas
    if top_expenses:
        analysis.append("\nüí∏ **AN√ÅLISE DE DESPESAS**")
        analysis.append("Principais categorias de gastos:")
        
        for i, (category, amount) in enumerate(top_expenses[:5], 1):
            percentage = (amount / current_expense) * 100 if current_expense > 0 else 0
            analysis.append(f"{i}. {category}: R$ {amount:.2f} ({percentage:.1f}%)")
        
        # Identificar categoria com maior gasto
        if top_expenses:
            biggest_expense = top_expenses[0]
            biggest_percentage = (biggest_expense[1] / current_expense) * 100 if current_expense > 0 else 0
            
            if biggest_percentage > 50:
                analysis.append(f"\n‚ö†Ô∏è **ALERTA**: {biggest_expense[0]} representa {biggest_percentage:.1f}% dos seus gastos!")
                analysis.append("Considere reduzir gastos nesta categoria.")
            elif biggest_percentage > 30:
                analysis.append(f"\nüìù **OBSERVA√á√ÉO**: {biggest_expense[0]} √© sua maior despesa ({biggest_percentage:.1f}%).")
    
    # 4. An√°lise de receitas
    if top_incomes:
        analysis.append("\nüí∞ **AN√ÅLISE DE RECEITAS**")
        analysis.append("Principais fontes de renda:")
        
        for i, (category, amount) in enumerate(top_incomes[:3], 1):
            percentage = (amount / current_income) * 100 if current_income > 0 else 0
            analysis.append(f"{i}. {category}: R$ {amount:.2f} ({percentage:.1f}%)")
    
    # 5. Recomenda√ß√µes
    analysis.append("\nüí° **RECOMENDA√á√ïES**")
    
    if current_balance < 0:
        analysis.append("‚ùå Seu saldo est√° negativo. Recomenda√ß√µes:")
        analysis.append("‚Ä¢ Revise suas despesas n√£o essenciais")
        analysis.append("‚Ä¢ Considere aumentar suas fontes de renda")
        analysis.append("‚Ä¢ Crie um fundo de emerg√™ncia")
    elif current_balance < current_income * 0.2:
        analysis.append("‚ö†Ô∏è Seu saldo est√° baixo. Recomenda√ß√µes:")
        analysis.append("‚Ä¢ Tente economizar pelo menos 20% da sua renda")
        analysis.append("‚Ä¢ Revise gastos recorrentes")
    else:
        analysis.append("‚úÖ Excelente! Seu saldo est√° saud√°vel.")
        analysis.append("‚Ä¢ Continue mantendo esse controle financeiro")
        analysis.append("‚Ä¢ Considere investir o excedente")
    
    # 6. Dicas espec√≠ficas por categoria
    if top_expenses:
        analysis.append("\nüéØ **DICAS ESPEC√çFICAS**")
        
        for category, amount in top_expenses[:3]:
            if 'alimenta√ß√£o' in category.lower() or 'comida' in category.lower():
                analysis.append(f"üçΩÔ∏è Para {category}: Considere cozinhar em casa e fazer lista de compras")
            elif 'transporte' in category.lower():
                analysis.append(f"üöó Para {category}: Avalie transporte p√∫blico ou carona solid√°ria")
            elif 'lazer' in category.lower() or 'entretenimento' in category.lower():
                analysis.append(f"üéÆ Para {category}: Procure op√ß√µes gratuitas ou com desconto")
            elif 'moradia' in category.lower() or 'casa' in category.lower():
                analysis.append(f"üè† Para {category}: Revise contratos e compare pre√ßos")
            else:
                analysis.append(f"üìù Para {category}: Revise se todos os gastos s√£o realmente necess√°rios")
    
    return "\n".join(analysis)

def ai_financial_analysis(user_id, timeframe='monthly'):
    """IA inteligente para an√°lise financeira preditiva e recomenda√ß√µes personalizadas"""
    
    # Calcular per√≠odo atual
    today = date.today()
    # Relat√≥rios agora s√£o somente mensais
    start_date = today.replace(day=1)
    period_days = 30
    
    # Buscar hist√≥rico completo do usu√°rio (√∫ltimos 6 meses)
    six_months_ago = today - timedelta(days=180)
    historical_transactions = Transaction.query.filter(
        Transaction.user_id == user_id,
        Transaction.date >= six_months_ago
    ).order_by(Transaction.date).all()
    
    # Dados do per√≠odo atual
    current_transactions = [t for t in historical_transactions if t.date >= start_date]
    
    # An√°lise de padr√µes temporais
    monthly_patterns = {}
    for t in historical_transactions:
        month_key = t.date.strftime('%Y-%m')
        if month_key not in monthly_patterns:
            monthly_patterns[month_key] = {'income': 0, 'expense': 0, 'categories': {}}
        
        if t.type == 'income':
            monthly_patterns[month_key]['income'] += t.amount
        else:
            monthly_patterns[month_key]['expense'] += t.amount
            monthly_patterns[month_key]['categories'][t.category] = monthly_patterns[month_key]['categories'].get(t.category, 0) + t.amount
    
    # Calcular tend√™ncias
    months = sorted(monthly_patterns.keys())
    if len(months) >= 2:
        recent_income_trend = (monthly_patterns[months[-1]]['income'] - monthly_patterns[months[-2]]['income']) / max(monthly_patterns[months[-2]]['income'], 1)
        recent_expense_trend = (monthly_patterns[months[-1]]['expense'] - monthly_patterns[months[-2]]['expense']) / max(monthly_patterns[months[-2]]['expense'], 1)
    else:
        recent_income_trend = 0
        recent_expense_trend = 0
    
    # An√°lise de categorias ao longo do tempo
    category_trends = {}
    for month in months[-3:]:  # √öltimos 3 meses
        for category, amount in monthly_patterns[month]['categories'].items():
            if category not in category_trends:
                category_trends[category] = []
            category_trends[category].append(amount)
    
    # Identificar categorias com tend√™ncia crescente
    growing_categories = []
    for category, amounts in category_trends.items():
        if len(amounts) >= 2 and amounts[-1] > amounts[0] * 1.1:  # 10% de crescimento
            growing_categories.append(category)
    
    # An√°lise de sazonalidade
    seasonal_analysis = {}
    for t in historical_transactions:
        month = t.date.month
        if month not in seasonal_analysis:
            seasonal_analysis[month] = {'income': 0, 'expense': 0, 'count': 0}
        
        if t.type == 'income':
            seasonal_analysis[month]['income'] += t.amount
        else:
            seasonal_analysis[month]['expense'] += t.amount
        seasonal_analysis[month]['count'] += 1
    
    # Identificar meses com maior gasto
    high_expense_months = []
    avg_expense = sum(data['expense'] for data in seasonal_analysis.values()) / len(seasonal_analysis) if seasonal_analysis else 0
    for month, data in seasonal_analysis.items():
        if data['expense'] > avg_expense * 1.2:  # 20% acima da m√©dia
            month_names = ['Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho',
                          'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']
            high_expense_months.append(month_names[month - 1])
    
    # An√°lise de risco financeiro
    current_income = sum(t.amount for t in current_transactions if t.type == 'income')
    current_expense = sum(t.amount for t in current_transactions if t.type == 'expense')
    current_balance = current_income - current_expense
    
    # Calcular √≠ndice de seguran√ßa financeira
    if current_income > 0:
        savings_rate = (current_balance / current_income) * 100
    else:
        savings_rate = 0
    
    # An√°lise de diversifica√ß√£o de receitas
    income_sources = {}
    for t in current_transactions:
        if t.type == 'income':
            income_sources[t.category] = income_sources.get(t.category, 0) + t.amount
    
    diversification_score = len(income_sources) / 3  # Normalizado para 0-1
    
    # Gerar an√°lise IA
    ai_analysis = []
    
    # 1. Resumo Executivo IA
    ai_analysis.append("ü§ñ **AN√ÅLISE INTELIGENTE - IA FINANCEIRA**")
    ai_analysis.append("=" * 50)
    
    # 2. Score de Sa√∫de Financeira
    health_score = 0
    if savings_rate >= 20:
        health_score += 30
        ai_analysis.append("‚úÖ **Score de Sa√∫de Financeira: EXCELENTE (30/30)**")
        ai_analysis.append("   Sua taxa de poupan√ßa est√° acima de 20% - padr√£o de excel√™ncia!")
    elif savings_rate >= 10:
        health_score += 20
        ai_analysis.append("‚ö†Ô∏è **Score de Sa√∫de Financeira: BOM (20/30)**")
        ai_analysis.append("   Sua taxa de poupan√ßa est√° entre 10-20% - pode melhorar.")
    elif savings_rate >= 0:
        health_score += 10
        ai_analysis.append("‚ùå **Score de Sa√∫de Financeira: ATEN√á√ÉO (10/30)**")
        ai_analysis.append("   Sua taxa de poupan√ßa est√° baixa - precisa economizar mais.")
    else:
        ai_analysis.append("üö® **Score de Sa√∫de Financeira: CR√çTICO (0/30)**")
        ai_analysis.append("   Voc√™ est√° gastando mais do que ganha - a√ß√£o imediata necess√°ria!")
    
    # 3. An√°lise de Tend√™ncias
    ai_analysis.append("\nüìà **AN√ÅLISE DE TEND√äNCIAS - IA**")
    
    if recent_income_trend > 0.1:
        ai_analysis.append("‚úÖ **Receitas**: Tend√™ncia POSITIVA (+{:.1f}%)".format(recent_income_trend * 100))
        ai_analysis.append("   Continue investindo em suas fontes de renda!")
    elif recent_income_trend < -0.1:
        ai_analysis.append("‚ùå **Receitas**: Tend√™ncia NEGATIVA ({:.1f}%)".format(recent_income_trend * 100))
        ai_analysis.append("   Considere buscar novas fontes de renda.")
    else:
        ai_analysis.append("üìä **Receitas**: Tend√™ncia EST√ÅVEL")
    
    if recent_expense_trend > 0.1:
        ai_analysis.append("‚ö†Ô∏è **Despesas**: Tend√™ncia CRESCENTE (+{:.1f}%)".format(recent_expense_trend * 100))
        ai_analysis.append("   ATEN√á√ÉO: Seus gastos est√£o aumentando!")
    elif recent_expense_trend < -0.1:
        ai_analysis.append("‚úÖ **Despesas**: Tend√™ncia DECRESCENTE ({:.1f}%)".format(recent_expense_trend * 100))
        ai_analysis.append("   Excelente! Voc√™ est√° controlando melhor os gastos.")
    else:
        ai_analysis.append("üìä **Despesas**: Tend√™ncia EST√ÅVEL")
    
    # 4. Alertas Inteligentes
    ai_analysis.append("\nüö® **ALERTAS INTELIGENTES**")
    
    if growing_categories:
        ai_analysis.append("‚ö†Ô∏è **Categorias em Crescimento**:")
        for category in growing_categories[:3]:
            ai_analysis.append(f"   ‚Ä¢ {category}: Monitorar de perto")
    
    if high_expense_months:
        ai_analysis.append("üìÖ **Meses de Alto Gasto**:")
        ai_analysis.append(f"   Prepare-se para: {', '.join(high_expense_months)}")
    
    # 5. Recomenda√ß√µes Personalizadas IA
    ai_analysis.append("\nüéØ **RECOMENDA√á√ïES PERSONALIZADAS - IA**")
    
    if savings_rate < 10:
        ai_analysis.append("üí∞ **Prioridade 1: Aumentar Poupan√ßa**")
        ai_analysis.append("   ‚Ä¢ Implemente a regra 50/30/20 (50% necessidades, 30% desejos, 20% poupan√ßa)")
        ai_analysis.append("   ‚Ä¢ Automatize transfer√™ncias para poupan√ßa")
        ai_analysis.append("   ‚Ä¢ Revise gastos recorrentes desnecess√°rios")
    
    if diversification_score < 0.5:
        ai_analysis.append("üîÑ **Prioridade 2: Diversificar Receitas**")
        ai_analysis.append("   ‚Ä¢ Considere freelancing ou trabalho extra")
        ai_analysis.append("   ‚Ä¢ Explore investimentos passivos")
        ai_analysis.append("   ‚Ä¢ Desenvolva habilidades monetiz√°veis")
    
    if growing_categories:
        ai_analysis.append("üìä **Prioridade 3: Controlar Crescimento de Gastos**")
        for category in growing_categories[:2]:
            ai_analysis.append(f"   ‚Ä¢ Estabele√ßa limite mensal para {category}")
            ai_analysis.append(f"   ‚Ä¢ Busque alternativas mais econ√¥micas")
    
    # 6. Previs√µes IA
    ai_analysis.append("\nüîÆ **PREVIS√ïES FINANCEIRAS - IA**")
    
    if recent_income_trend > 0 and recent_expense_trend < 0:
        ai_analysis.append("‚úÖ **Cen√°rio Otimista**: Se mantiver essa tend√™ncia, em 3 meses voc√™ ter√°:")
        projected_balance = current_balance * (1 + recent_income_trend - recent_expense_trend) ** 3
        ai_analysis.append(f"   Saldo projetado: R$ {projected_balance:.2f}")
    elif recent_expense_trend > 0.1:
        ai_analysis.append("‚ö†Ô∏è **Cen√°rio de Aten√ß√£o**: Se continuar gastando mais, em 3 meses:")
        projected_balance = current_balance * (1 - recent_expense_trend) ** 3
        ai_analysis.append(f"   Saldo projetado: R$ {projected_balance:.2f}")
        ai_analysis.append("   A√ß√£o imediata recomendada!")
    else:
        ai_analysis.append("üìä **Cen√°rio Est√°vel**: Mantendo o padr√£o atual, seu saldo permanecer√° est√°vel")
    
    # 7. Dicas Inteligentes por Categoria
    ai_analysis.append("\nüß† **DICAS INTELIGENTES POR CATEGORIA**")
    
    expense_categories = {}
    for t in current_transactions:
        if t.type == 'expense':
            expense_categories[t.category] = expense_categories.get(t.category, 0) + t.amount
    
    top_expenses = sorted(expense_categories.items(), key=lambda x: x[1], reverse=True)
    
    for category, amount in top_expenses[:3]:
        percentage = (amount / current_expense) * 100 if current_expense > 0 else 0
        
        if 'alimenta√ß√£o' in category.lower() or 'comida' in category.lower():
            if percentage > 30:
                ai_analysis.append(f"üçΩÔ∏è **{category} ({percentage:.1f}%)**: ALTO GASTO")
                ai_analysis.append("   ‚Ä¢ Implemente planejamento de refei√ß√µes")
                ai_analysis.append("   ‚Ä¢ Use aplicativos de cupom e desconto")
                ai_analysis.append("   ‚Ä¢ Considere compras em atacado")
            else:
                ai_analysis.append(f"üçΩÔ∏è **{category} ({percentage:.1f}%)**: GASTO CONTROLADO")
        
        elif 'transporte' in category.lower():
            if percentage > 20:
                ai_analysis.append(f"üöó **{category} ({percentage:.1f}%)**: ALTO GASTO")
                ai_analysis.append("   ‚Ä¢ Avalie transporte p√∫blico")
                ai_analysis.append("   ‚Ä¢ Considere carona solid√°ria")
                ai_analysis.append("   ‚Ä¢ Revise necessidade de m√∫ltiplos ve√≠culos")
            else:
                ai_analysis.append(f"üöó **{category} ({percentage:.1f}%)**: GASTO CONTROLADO")
        
        elif 'lazer' in category.lower() or 'entretenimento' in category.lower():
            if percentage > 15:
                ai_analysis.append(f"üéÆ **{category} ({percentage:.1f}%)**: ALTO GASTO")
                ai_analysis.append("   ‚Ä¢ Busque op√ß√µes gratuitas")
                ai_analysis.append("   ‚Ä¢ Use promo√ß√µes e descontos")
                ai_analysis.append("   ‚Ä¢ Estabele√ßa limite mensal")
            else:
                ai_analysis.append(f"üéÆ **{category} ({percentage:.1f}%)**: GASTO CONTROLADO")
        
        else:
            if percentage > 25:
                ai_analysis.append(f"üìù **{category} ({percentage:.1f}%)**: ALTO GASTO")
                ai_analysis.append("   ‚Ä¢ Revise se todos os gastos s√£o necess√°rios")
                ai_analysis.append("   ‚Ä¢ Busque alternativas mais econ√¥micas")
                ai_analysis.append("   ‚Ä¢ Considere renegociar contratos")
            else:
                ai_analysis.append(f"üìù **{category} ({percentage:.1f}%)**: GASTO CONTROLADO")
    
    # 8. Plano de A√ß√£o IA
    ai_analysis.append("\nüìã **PLANO DE A√á√ÉO RECOMENDADO - IA**")
    
    if savings_rate < 10:
        ai_analysis.append("üéØ **Meta Imediata (1 m√™s)**: Aumentar poupan√ßa para 10%")
        ai_analysis.append("üéØ **Meta Curto Prazo (3 meses)**: Atingir 15% de poupan√ßa")
        ai_analysis.append("üéØ **Meta M√©dio Prazo (6 meses)**: Atingir 20% de poupan√ßa")
    elif savings_rate < 20:
        ai_analysis.append("üéØ **Meta Imediata (1 m√™s)**: Manter poupan√ßa atual")
        ai_analysis.append("üéØ **Meta Curto Prazo (3 meses)**: Aumentar para 20%")
        ai_analysis.append("üéØ **Meta M√©dio Prazo (6 meses)**: Considerar investimentos")
    else:
        ai_analysis.append("üéØ **Meta Imediata (1 m√™s)**: Manter excelente padr√£o")
        ai_analysis.append("üéØ **Meta Curto Prazo (3 meses)**: Diversificar investimentos")
        ai_analysis.append("üéØ **Meta M√©dio Prazo (6 meses)**: Criar fundo de emerg√™ncia de 6 meses")
    
    return "\n".join(ai_analysis)

def advanced_ai_analysis(user_id, timeframe='monthly'):
    """IA super avan√ßada com machine learning para an√°lise financeira preditiva"""
    
    # Calcular per√≠odo atual
    today = date.today()
    # Relat√≥rios agora s√£o somente mensais
    start_date = today.replace(day=1)
    period_days = 30
    
    # Buscar hist√≥rico completo (√∫ltimos 12 meses para an√°lise mais profunda)
    twelve_months_ago = today - timedelta(days=365)
    historical_transactions = Transaction.query.filter(
        Transaction.user_id == user_id,
        Transaction.date >= twelve_months_ago
    ).order_by(Transaction.date).all()
    
    # Dados do per√≠odo atual
    current_transactions = [t for t in historical_transactions if t.date >= start_date]
    
    # An√°lise de padr√µes temporais avan√ßada
    monthly_patterns = {}
    for t in historical_transactions:
        month_key = t.date.strftime('%Y-%m')
        if month_key not in monthly_patterns:
            monthly_patterns[month_key] = {
                'income': 0, 'expense': 0, 'categories': {},
                'transaction_count': 0, 'avg_transaction': 0
            }
        
        if t.type == 'income':
            monthly_patterns[month_key]['income'] += t.amount
        else:
            monthly_patterns[month_key]['expense'] += t.amount
            monthly_patterns[month_key]['categories'][t.category] = monthly_patterns[month_key]['categories'].get(t.category, 0) + t.amount
        
        monthly_patterns[month_key]['transaction_count'] += 1
    
    # Calcular m√©dias por transa√ß√£o
    for month in monthly_patterns:
        if monthly_patterns[month]['transaction_count'] > 0:
            monthly_patterns[month]['avg_transaction'] = (
                monthly_patterns[month]['income'] + monthly_patterns[month]['expense']
            ) / monthly_patterns[month]['transaction_count']
    
    # An√°lise de tend√™ncias com regress√£o linear simples
    months = sorted(monthly_patterns.keys())
    if len(months) >= 3:
        # Calcular tend√™ncia linear
        n = len(months)
        x_values = list(range(n))
        y_income = [monthly_patterns[month]['income'] for month in months]
        y_expense = [monthly_patterns[month]['expense'] for month in months]
        
        # Regress√£o linear para receitas
        sum_x = sum(x_values)
        sum_y_income = sum(y_income)
        sum_xy_income = sum(x * y for x, y in zip(x_values, y_income))
        sum_x2 = sum(x * x for x in x_values)
        
        if n * sum_x2 - sum_x * sum_x != 0:
            slope_income = (n * sum_xy_income - sum_x * sum_y_income) / (n * sum_x2 - sum_x * sum_x)
            intercept_income = (sum_y_income - slope_income * sum_x) / n
            
            # Regress√£o linear para despesas
            sum_y_expense = sum(y_expense)
            sum_xy_expense = sum(x * y for x, y in zip(x_values, y_expense))
            slope_expense = (n * sum_xy_expense - sum_x * sum_y_expense) / (n * sum_x2 - sum_x * sum_x)
            intercept_expense = (sum_y_expense - slope_expense * sum_x) / n
        else:
            slope_income = slope_expense = 0
            intercept_income = intercept_expense = 0
    else:
        slope_income = slope_expense = 0
        intercept_income = intercept_expense = 0
    
    # An√°lise de volatilidade financeira
    if len(months) >= 2:
        income_values = [monthly_patterns[month]['income'] for month in months]
        expense_values = [monthly_patterns[month]['expense'] for month in months]
        
        # Calcular desvio padr√£o
        avg_income = sum(income_values) / len(income_values)
        avg_expense = sum(expense_values) / len(expense_values)
        
        income_variance = sum((x - avg_income) ** 2 for x in income_values) / len(income_values)
        expense_variance = sum((x - avg_expense) ** 2 for x in expense_values) / len(expense_values)
        
        income_volatility = (income_variance ** 0.5) / avg_income if avg_income > 0 else 0
        expense_volatility = (expense_variance ** 0.5) / avg_expense if avg_expense > 0 else 0
    else:
        income_volatility = expense_volatility = 0
    
    # An√°lise de correla√ß√£o entre receitas e despesas
    if len(months) >= 2:
        income_values = [monthly_patterns[month]['income'] for month in months]
        expense_values = [monthly_patterns[month]['expense'] for month in months]
        
        avg_income = sum(income_values) / len(income_values)
        avg_expense = sum(expense_values) / len(expense_values)
        
        numerator = sum((x - avg_income) * (y - avg_expense) for x, y in zip(income_values, expense_values))
        denominator_income = sum((x - avg_income) ** 2 for x in income_values)
        denominator_expense = sum((y - avg_expense) ** 2 for y in expense_values)
        
        if denominator_income > 0 and denominator_expense > 0:
            correlation = numerator / (denominator_income * denominator_expense) ** 0.5
        else:
            correlation = 0
    else:
        correlation = 0
    
    # An√°lise de categorias com machine learning
    category_analysis = {}
    for t in historical_transactions:
        if t.type == 'expense':
            if t.category not in category_analysis:
                category_analysis[t.category] = {
                    'total': 0, 'count': 0, 'dates': [], 'trend': 0
                }
            category_analysis[t.category]['total'] += t.amount
            category_analysis[t.category]['count'] += 1
            category_analysis[t.category]['dates'].append(t.date)
    
    # Calcular tend√™ncia por categoria
    for category in category_analysis:
        dates = category_analysis[category]['dates']
        if len(dates) >= 2:
            # Dividir em per√≠odos para calcular tend√™ncia
            mid_point = len(dates) // 2
            early_period = dates[:mid_point]
            late_period = dates[mid_point:]
            
            early_amount = sum(t.amount for t in historical_transactions 
                             if t.category == category and t.date in early_period)
            late_amount = sum(t.amount for t in historical_transactions 
                            if t.category == category and t.date in late_period)
            
            if early_amount > 0:
                category_analysis[category]['trend'] = (late_amount - early_amount) / early_amount
            else:
                category_analysis[category]['trend'] = 0
    
    # An√°lise de sazonalidade avan√ßada
    seasonal_patterns = {}
    for t in historical_transactions:
        month = t.date.month
        if month not in seasonal_patterns:
            seasonal_patterns[month] = {'income': 0, 'expense': 0, 'count': 0}
        
        if t.type == 'income':
            seasonal_patterns[month]['income'] += t.amount
        else:
            seasonal_patterns[month]['expense'] += t.amount
        seasonal_patterns[month]['count'] += 1
    
    # Identificar padr√µes sazonais
    month_names = ['Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho',
                  'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']
    
    high_expense_months = []
    high_income_months = []
    
    if seasonal_patterns:
        avg_expense = sum(data['expense'] for data in seasonal_patterns.values()) / len(seasonal_patterns)
        avg_income = sum(data['income'] for data in seasonal_patterns.values()) / len(seasonal_patterns)
        
        for month, data in seasonal_patterns.items():
            if data['expense'] > avg_expense * 1.15:  # 15% acima da m√©dia
                high_expense_months.append(month_names[month - 1])
            if data['income'] > avg_income * 1.15:
                high_income_months.append(month_names[month - 1])
    
    # Calcular m√©tricas atuais
    current_income = sum(t.amount for t in current_transactions if t.type == 'income')
    current_expense = sum(t.amount for t in current_transactions if t.type == 'expense')
    current_balance = current_income - current_expense
    
    # Calcular √≠ndices financeiros avan√ßados
    if current_income > 0:
        savings_rate = (current_balance / current_income) * 100
        expense_ratio = (current_expense / current_income) * 100
    else:
        savings_rate = expense_ratio = 0
    
    # An√°lise de diversifica√ß√£o
    income_sources = {}
    for t in current_transactions:
        if t.type == 'income':
            income_sources[t.category] = income_sources.get(t.category, 0) + t.amount
    
    diversification_score = len(income_sources) / 3  # Normalizado para 0-1
    
    # Gerar an√°lise IA super avan√ßada
    ai_analysis = []
    
    # 1. Cabe√ßalho IA Avan√ßada
    ai_analysis.append("üß† **IA FINANCEIRA SUPER AVAN√áADA - MACHINE LEARNING**")
    ai_analysis.append("=" * 60)
    
    # 2. Score de Intelig√™ncia Financeira
    intelligence_score = 0
    intelligence_factors = []
    
    if savings_rate >= 20:
        intelligence_score += 25
        intelligence_factors.append("‚úÖ Poupan√ßa excelente (+25)")
    elif savings_rate >= 10:
        intelligence_score += 15
        intelligence_factors.append("‚ö†Ô∏è Poupan√ßa moderada (+15)")
    elif savings_rate >= 0:
        intelligence_score += 5
        intelligence_factors.append("‚ùå Poupan√ßa baixa (+5)")
    
    if income_volatility < 0.2:
        intelligence_score += 20
        intelligence_factors.append("‚úÖ Renda est√°vel (+20)")
    elif income_volatility < 0.4:
        intelligence_score += 10
        intelligence_factors.append("‚ö†Ô∏è Renda moderadamente vol√°til (+10)")
    else:
        intelligence_factors.append("‚ùå Renda muito vol√°til (+0)")
    
    if expense_volatility < 0.2:
        intelligence_score += 20
        intelligence_factors.append("‚úÖ Gastos controlados (+20)")
    elif expense_volatility < 0.4:
        intelligence_score += 10
        intelligence_factors.append("‚ö†Ô∏è Gastos moderadamente vol√°teis (+10)")
    else:
        intelligence_factors.append("‚ùå Gastos muito vol√°teis (+0)")
    
    if diversification_score >= 0.7:
        intelligence_score += 15
        intelligence_factors.append("‚úÖ Renda diversificada (+15)")
    elif diversification_score >= 0.3:
        intelligence_score += 10
        intelligence_factors.append("‚ö†Ô∏è Renda parcialmente diversificada (+10)")
    else:
        intelligence_factors.append("‚ùå Renda n√£o diversificada (+0)")
    
    if correlation < 0.5:
        intelligence_score += 20
        intelligence_factors.append("‚úÖ Baixa correla√ß√£o receita-despesa (+20)")
    elif correlation < 0.8:
        intelligence_score += 10
        intelligence_factors.append("‚ö†Ô∏è Correla√ß√£o moderada (+10)")
    else:
        intelligence_factors.append("‚ùå Alta correla√ß√£o (+0)")
    
    # Classificar score
    if intelligence_score >= 80:
        grade = "EXCELENTE"
        grade_emoji = "üèÜ"
    elif intelligence_score >= 60:
        grade = "BOM"
        grade_emoji = "ü•á"
    elif intelligence_score >= 40:
        grade = "REGULAR"
        grade_emoji = "ü•à"
    else:
        grade = "PRECISA MELHORAR"
        grade_emoji = "ü•â"
    
    ai_analysis.append(f"{grade_emoji} **SCORE DE INTELIG√äNCIA FINANCEIRA: {grade} ({intelligence_score}/100)**")
    for factor in intelligence_factors:
        ai_analysis.append(f"   {factor}")
    
    # 3. An√°lise Preditiva Avan√ßada
    ai_analysis.append(f"\nüîÆ **AN√ÅLISE PREDITIVA - MACHINE LEARNING**")
    
    if len(months) >= 3:
        # Previs√£o para pr√≥ximos 3 meses
        future_months = 3
        predicted_income = intercept_income + slope_income * (len(months) + future_months - 1)
        predicted_expense = intercept_expense + slope_expense * (len(months) + future_months - 1)
        predicted_balance = predicted_income - predicted_expense
        
        ai_analysis.append(f"üìà **Previs√£o 3 meses (Regress√£o Linear):**")
        ai_analysis.append(f"   Receita projetada: R$ {predicted_income:.2f}")
        ai_analysis.append(f"   Despesa projetada: R$ {predicted_expense:.2f}")
        ai_analysis.append(f"   Saldo projetado: R$ {predicted_balance:.2f}")
        
        # An√°lise de confian√ßa
        if abs(slope_income) < 0.1 and abs(slope_expense) < 0.1:
            ai_analysis.append("   üéØ **Alta confian√ßa** - Padr√µes est√°veis")
        elif abs(slope_income) < 0.3 and abs(slope_expense) < 0.3:
            ai_analysis.append("   ‚ö†Ô∏è **Confian√ßa moderada** - Alguma volatilidade")
        else:
            ai_analysis.append("   üö® **Baixa confian√ßa** - Padr√µes muito vol√°teis")
    
    # 4. An√°lise de Volatilidade
    ai_analysis.append(f"\nüìä **AN√ÅLISE DE VOLATILIDADE FINANCEIRA**")
    
    if income_volatility < 0.1:
        ai_analysis.append("‚úÖ **Receitas**: Muito est√°veis (volatilidade baixa)")
    elif income_volatility < 0.3:
        ai_analysis.append("‚ö†Ô∏è **Receitas**: Moderadamente est√°veis")
    else:
        ai_analysis.append("üö® **Receitas**: Muito vol√°teis - considere diversificar")
    
    if expense_volatility < 0.1:
        ai_analysis.append("‚úÖ **Despesas**: Bem controladas (volatilidade baixa)")
    elif expense_volatility < 0.3:
        ai_analysis.append("‚ö†Ô∏è **Despesas**: Moderadamente controladas")
    else:
        ai_analysis.append("üö® **Despesas**: Muito vol√°teis - precisa de mais controle")
    
    # 5. An√°lise de Correla√ß√£o
    ai_analysis.append(f"\nüîÑ **AN√ÅLISE DE CORRELA√á√ÉO RECEITA-DESPESA**")
    
    if correlation < 0.3:
        ai_analysis.append("‚úÖ **Correla√ß√£o baixa** - Excelente! Suas despesas n√£o dependem da receita")
    elif correlation < 0.7:
        ai_analysis.append("‚ö†Ô∏è **Correla√ß√£o moderada** - Suas despesas variam com a receita")
    else:
        ai_analysis.append("üö® **Correla√ß√£o alta** - Suas despesas seguem a receita (risco!)")
    
    # 6. An√°lise de Categorias Inteligente
    ai_analysis.append(f"\nüéØ **AN√ÅLISE INTELIGENTE DE CATEGORIAS**")
    
    # Identificar categorias problem√°ticas
    problematic_categories = []
    growing_categories = []
    
    for category, data in category_analysis.items():
        if data['trend'] > 0.2:  # 20% de crescimento
            growing_categories.append((category, data['trend']))
        if data['total'] > current_income * 0.4:  # Mais de 40% da renda
            problematic_categories.append(category)
    
    if growing_categories:
        ai_analysis.append("üìà **Categorias em Crescimento (Machine Learning):**")
        for category, trend in sorted(growing_categories, key=lambda x: x[1], reverse=True)[:3]:
            ai_analysis.append(f"   ‚Ä¢ {category}: +{trend*100:.1f}% (ATEN√á√ÉO!)")
    
    if problematic_categories:
        ai_analysis.append("üö® **Categorias Problem√°ticas:**")
        for category in problematic_categories:
            ai_analysis.append(f"   ‚Ä¢ {category}: Consome muito da sua renda")
    
    # 7. An√°lise Sazonal Inteligente
    ai_analysis.append(f"\nüìÖ **AN√ÅLISE SAZONAL INTELIGENTE**")
    
    if high_expense_months:
        ai_analysis.append("üí∞ **Prepare-se para meses de alto gasto:**")
        ai_analysis.append(f"   {', '.join(high_expense_months)}")
        ai_analysis.append("   üí° **Estrat√©gia:** Economize nos meses anteriores")
    
    if high_income_months:
        ai_analysis.append("üìà **Meses de alta receita:**")
        ai_analysis.append(f"   {', '.join(high_income_months)}")
        ai_analysis.append("   üí° **Estrat√©gia:** Aproveite para poupar mais")
    
    # 8. Recomenda√ß√µes de Machine Learning
    ai_analysis.append(f"\nü§ñ **RECOMENDA√á√ïES DE MACHINE LEARNING**")
    
    # Baseado no score de intelig√™ncia
    if intelligence_score < 40:
        ai_analysis.append("üö® **PRIORIDADE M√ÅXIMA - ESTABILIZA√á√ÉO**")
        ai_analysis.append("   1. Corte gastos n√£o essenciais imediatamente")
        ai_analysis.append("   2. Crie fundo de emerg√™ncia b√°sico")
        ai_analysis.append("   3. Busque renda extra urgente")
        ai_analysis.append("   4. Consulte um consultor financeiro")
    
    elif intelligence_score < 60:
        ai_analysis.append("‚ö†Ô∏è **PRIORIDADE ALTA - OTIMIZA√á√ÉO**")
        ai_analysis.append("   1. Implemente regra 50/30/20")
        ai_analysis.append("   2. Automatize poupan√ßa")
        ai_analysis.append("   3. Diversifique fontes de renda")
        ai_analysis.append("   4. Monitore gastos mais de perto")
    
    elif intelligence_score < 80:
        ai_analysis.append("‚úÖ **PRIORIDADE M√âDIA - CRESCIMENTO**")
        ai_analysis.append("   1. Aumente taxa de poupan√ßa para 25%")
        ai_analysis.append("   2. Comece a investir")
        ai_analysis.append("   3. Planeje objetivos de longo prazo")
        ai_analysis.append("   4. Considere empreendedorismo")
    
    else:
        ai_analysis.append("üèÜ **PRIORIDADE BAIXA - MANUTEN√á√ÉO**")
        ai_analysis.append("   1. Mantenha excelente padr√£o")
        ai_analysis.append("   2. Diversifique investimentos")
        ai_analysis.append("   3. Considere filantropia")
        ai_analysis.append("   4. Planeje sucess√£o patrimonial")
    
    # 9. Alertas Inteligentes
    ai_analysis.append(f"\nüö® **ALERTAS INTELIGENTES - IA**")
    
    if current_balance < 0:
        ai_analysis.append("üî¥ **ALERTA CR√çTICO:** Saldo negativo - a√ß√£o imediata necess√°ria!")
    
    if savings_rate < 10:
        ai_analysis.append("üü° **ALERTA AMARELO:** Poupan√ßa baixa - risco financeiro")
    
    if income_volatility > 0.4:
        ai_analysis.append("üü° **ALERTA AMARELO:** Renda muito vol√°til - diversifique")
    
    if expense_volatility > 0.4:
        ai_analysis.append("üü° **ALERTA AMARELO:** Gastos muito vol√°teis - controle melhor")
    
    if correlation > 0.8:
        ai_analysis.append("üü° **ALERTA AMARELO:** Alta correla√ß√£o receita-despesa")
    
    if not any(alert.startswith("üü°") or alert.startswith("üî¥") for alert in ai_analysis[-5:]):
        ai_analysis.append("üü¢ **STATUS:** Todas as m√©tricas est√£o saud√°veis!")
    
    # 10. Or√ßamento Personalizado (50/30/20) e comparativo real
    ai_analysis.append("\nüíº **OR√áAMENTO PERSONALIZADO (REGRA 50/30/20)**")
    target_needs = current_income * 0.50
    target_wants = current_income * 0.30
    target_saving = current_income * 0.20

    # Estimar necessidades vs desejos a partir das categorias
    needs_keywords = ['alimenta', 'mercado', 'supermerc', 'moradia', 'alug', 'condom', 'luz', '√°gua', 'agua', 'energia', 'internet', 'transporte', 'gasolina', 'sa√∫de', 'saude', 'medic', 'educa', 'escola']
    wants_keywords = ['lazer', 'entreten', 'restaur', 'delivery', 'assinatura', 'stream', 'viagem', 'jogo']
    current_needs = 0.0
    current_wants = 0.0
    for t in current_transactions:
        if t.type == 'expense':
            category_lower = (t.category or '').lower()
            if any(k in category_lower for k in needs_keywords):
                current_needs += t.amount
            elif any(k in category_lower for k in wants_keywords):
                current_wants += t.amount
            else:
                # N√£o classificado: dividir proporcionalmente (70% necessidade / 30% desejo)
                current_needs += t.amount * 0.7
                current_wants += t.amount * 0.3

    from math import ceil
    def fc(v: float) -> str:
        return format_currency(v)

    ai_analysis.append(f"‚Ä¢ Necessidades (alvo 50%): {fc(target_needs)} | Atual: {fc(current_needs)}")
    ai_analysis.append(f"‚Ä¢ Desejos (alvo 30%): {fc(target_wants)} | Atual: {fc(current_wants)}")
    ai_analysis.append(f"‚Ä¢ Poupan√ßa/Invest. (alvo 20%): {fc(target_saving)} | Atual: {fc(max(current_balance, 0))}")

    # 11. Plano de corte por categoria (valores precisos)
    ai_analysis.append("\n‚úÇÔ∏è **PLANO DE CORTE POR CATEGORIA (VALORES PRECISOS)**")
    # Despesas por categoria no per√≠odo atual
    expense_categories_current = {}
    for t in current_transactions:
        if t.type == 'expense':
            expense_categories_current[t.category] = expense_categories_current.get(t.category, 0) + t.amount
    top_expenses_current = sorted(expense_categories_current.items(), key=lambda x: x[1], reverse=True)[:5]

    # Definir intensidade de corte conforme situa√ß√£o
    if savings_rate < 5 or current_balance < 0:
        cut_pct = 0.30
    elif savings_rate < 10:
        cut_pct = 0.20
    else:
        cut_pct = 0.15

    if top_expenses_current:
        for idx, (cat, amt) in enumerate(top_expenses_current, 1):
            cut_value = amt * cut_pct
            ai_analysis.append(f"{idx}. {cat}: atual {fc(amt)} ‚Üí corte sugerido {int(cut_pct*100)}% ({fc(cut_value)})")
    else:
        ai_analysis.append("Sem despesas categorizadas suficientes neste per√≠odo para sugerir cortes.")

    # 12. Fundo de Emerg√™ncia - alvo e plano mensal
    ai_analysis.append("\nüõü **FUNDO DE EMERG√äNCIA - PLANO**")
    # M√©dia de despesas dos √∫ltimos meses
    average_monthly_expense = 0.0
    if months:
        consider_months = months[-min(len(months), 6):]
        total_exp = sum(monthly_patterns[m]['expense'] for m in consider_months)
        average_monthly_expense = total_exp / len(consider_months)
    else:
        average_monthly_expense = current_expense

    # Definir meses alvo conforme risco/volatilidade
    target_months_buffer = 6 if (expense_volatility > 0.3 or current_balance < 0) else 3
    emergency_target_value = average_monthly_expense * target_months_buffer

    # Sugest√£o de aporte mensal: prioriza 60% do super√°vit ou 15% da renda (o que for maior), limitado a 25% da renda
    monthly_surplus = max(current_balance, 0)
    suggested_monthly_contribution = max(current_income * 0.15, monthly_surplus * 0.6)
    suggested_monthly_contribution = min(suggested_monthly_contribution, current_income * 0.25)

    months_to_reach = "‚àû"
    if suggested_monthly_contribution > 0 and emergency_target_value > 0:
        months_to_reach = ceil(emergency_target_value / suggested_monthly_contribution)

    ai_analysis.append(f"‚Ä¢ Despesa m√©dia mensal: {fc(average_monthly_expense)}")
    ai_analysis.append(f"‚Ä¢ Alvo do fundo ({target_months_buffer} meses): {fc(emergency_target_value)}")
    ai_analysis.append(f"‚Ä¢ Aporte mensal sugerido: {fc(suggested_monthly_contribution)} ‚Üí atingir em ~{months_to_reach} meses")

    # 13. Plano de Poupan√ßa e Investimento (distribui√ß√£o sugerida)
    ai_analysis.append("\nüìà **PLANO DE POUPAN√áA E INVESTIMENTOS**")
    # Aplicar perfil do usu√°rio √†s aloca√ß√µes sugeridas
    profile = get_or_create_ai_profile(user_id)
    if emergency_target_value > 0 and suggested_monthly_contribution > 0:
        ai_analysis.append("Primeiro, priorize construir o fundo de emerg√™ncia.")
        alloc = apply_profile_to_allocations(profile, suggested_monthly_contribution)
        ai_analysis.append(f"   ‚Ä¢ {fc(alloc['liquidez_diaria'])} ‚Üí Reserva/Emerg√™ncia (liquidez di√°ria)")
        ai_analysis.append(f"   ‚Ä¢ {fc(alloc['curto_prazo'])} ‚Üí Curto prazo (CDB/Tesouro 6-12m)")
        ai_analysis.append(f"   ‚Ä¢ {fc(alloc['diversificados'])} ‚Üí Diversificados (fundos/ETFs)")
        ai_analysis.append(f"   ‚Ä¢ {fc(alloc['oportunidades'])} ‚Üí Caixa de oportunidades")
    else:
        # Quando j√° houver super√°vit constante, distribuir mensalmente
        base_invest = max(current_income * 0.20, monthly_surplus * 0.6)
        ai_analysis.append("Com o fundo de emerg√™ncia atingido, distribua mensalmente:")
        alloc = apply_profile_to_allocations(profile, base_invest)
        ai_analysis.append(f"   ‚Ä¢ {fc(alloc['liquidez_diaria'])} ‚Üí Tesouro Selic / CDB liquidez di√°ria")
        ai_analysis.append(f"   ‚Ä¢ {fc(alloc['curto_prazo'])} ‚Üí CDB/LC de 6-12 meses")
        ai_analysis.append(f"   ‚Ä¢ {fc(alloc['diversificados'])} ‚Üí Fundos/ETFs diversificados")
        ai_analysis.append(f"   ‚Ä¢ {fc(alloc['oportunidades'])} ‚Üí Caixa de oportunidades")

    # 14. A√ß√µes imediatas desta semana (precisas)
    ai_analysis.append("\nüóìÔ∏è **A√á√ïES IMEDIATAS (ESTA SEMANA)**")
    if top_expenses_current:
        main_cat, main_amt = top_expenses_current[0]
        weekly_cut = (main_amt * cut_pct) / 4
        ai_analysis.append(f"1. Reduzir {main_cat} em {int(cut_pct*100)}% ({fc(weekly_cut)} esta semana)")
    else:
        ai_analysis.append("1. Mapear principais gastos e definir cortes de 15-30%")
    ai_analysis.append("2. Agendar transfer√™ncia autom√°tica no dia do sal√°rio (poupan√ßa)")
    ai_analysis.append("3. Revisar assinaturas e cancelar o que n√£o usa")

    return "\n".join(ai_analysis)

@app.route('/reports')
@login_required
def reports():
    # Relat√≥rio fixo mensal
    timeframe = 'monthly'
    chart_type = request.args.get('chart_type', 'both')
    
    # Obter resumo financeiro
    summary = get_transactions_summary(current_user.id, timeframe)
    
    # Criar dados do gr√°fico
    chart_data = create_chart_data(current_user.id, timeframe, chart_type)
    
    # Gerar an√°lise detalhada
    analysis = generate_detailed_analysis(current_user.id, timeframe)
    
    # Gerar an√°lise de IA
    ai_analysis = ai_financial_analysis(current_user.id, timeframe)
    
    return render_template('reports.html', 
                         total_income=summary['total_income'],
                         total_expense=summary['total_expense'],
                         balance=summary['balance'],
                         timeframe=timeframe,
                         chart_type=chart_type,
                         bar_chart=chart_data,
                         analysis=analysis,
                         ai_analysis=ai_analysis)

@app.route('/export_analysis')
@login_required
def export_analysis():
    """Exporta a an√°lise detalhada em formato PDF"""
    # Relat√≥rio fixo mensal
    timeframe = 'monthly'
    
    # Gerar an√°lise detalhada
    analysis = generate_detailed_analysis(current_user.id, timeframe)
    
    # Obter resumo financeiro
    summary = get_transactions_summary(current_user.id, timeframe)
    
    # Criar conte√∫do HTML para PDF
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>An√°lise Financeira - {current_user.username}</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; }}
            .header {{ text-align: center; margin-bottom: 30px; }}
            .summary {{ display: flex; justify-content: space-between; margin-bottom: 30px; }}
            .summary-item {{ text-align: center; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }}
            .income {{ background-color: #d4edda; }}
            .expense {{ background-color: #f8d7da; }}
            .balance {{ background-color: #d1ecf1; }}
            .analysis {{ line-height: 1.6; }}
            .section {{ margin-bottom: 20px; }}
            .section-title {{ font-weight: bold; color: #007bff; border-bottom: 2px solid #007bff; padding-bottom: 5px; }}
        </style>
    </head>
    <body>
        <div class="header">
            <h1>üìä An√°lise Financeira Detalhada</h1>
            <p>Usu√°rio: {current_user.username}</p>
            <p>Per√≠odo: Mensal</p>
            <p>Data: {date.today().strftime('%d/%m/%Y')}</p>
        </div>
        
        <div class="summary">
            <div class="summary-item income">
                <h3>üí∞ Receitas</h3>
                <h2>R$ {summary['total_income']:.2f}</h2>
            </div>
            <div class="summary-item expense">
                <h3>üí∏ Despesas</h3>
                <h2>R$ {summary['total_expense']:.2f}</h2>
            </div>
            <div class="summary-item balance">
                <h3>üí≥ Saldo</h3>
                <h2>R$ {summary['balance']:.2f}</h2>
            </div>
        </div>
        
        <div class="analysis">
            {'<br>'.join(analysis.splitlines())}
        </div>
    </body>
    </html>
    """
    
    # Por enquanto, retornamos o HTML (voc√™ pode implementar PDF depois)
    return html_content, 200, {'Content-Type': 'text/html; charset=utf-8'}

import secrets
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta

# Dicion√°rio para armazenar c√≥digos de redefini√ß√£o (em produ√ß√£o, use Redis ou banco de dados)
password_reset_codes = {}

# Dicion√°rio para controlar tentativas por IP (em produ√ß√£o, use Redis ou banco de dados)
reset_attempts = {}

def cleanup_expired_codes():
    """Remove c√≥digos expirados"""
    current_time = datetime.now()
    expired_codes = []
    
    for code, data in password_reset_codes.items():
        if current_time > data['expiry']:
            expired_codes.append(code)
    
    for code in expired_codes:
        del password_reset_codes[code]
    
    if expired_codes:
        print(f"üßπ Removidos {len(expired_codes)} c√≥digos expirados")

def check_reset_attempts(ip_address):
    """Verifica se o IP n√£o excedeu o limite de tentativas"""
    current_time = datetime.now()
    
    # Limpar tentativas antigas (mais de 1 hora)
    expired_attempts = []
    for ip, data in reset_attempts.items():
        if current_time - data['first_attempt'] > timedelta(hours=1):
            expired_attempts.append(ip)
    
    for ip in expired_attempts:
        del reset_attempts[ip]
    
    # Verificar tentativas do IP atual
    if ip_address in reset_attempts:
        data = reset_attempts[ip_address]
        
        # Se passou mais de 1 hora, resetar
        if current_time - data['first_attempt'] > timedelta(hours=1):
            del reset_attempts[ip_address]
            return True
        
        # Verificar se n√£o excedeu o limite (m√°ximo 5 tentativas por hora)
        if data['count'] >= 5:
            return False
        
        # Incrementar contador
        data['count'] += 1
        data['last_attempt'] = current_time
    else:
        # Primeira tentativa
        reset_attempts[ip_address] = {
            'count': 1,
            'first_attempt': current_time,
            'last_attempt': current_time
        }
    
    return True

@app.route('/forgot_password', methods=['GET', 'POST'])
def forgot_password():
    if request.method == 'POST':
        # Limpar c√≥digos expirados
        cleanup_expired_codes()
        
        # Verificar tentativas por IP
        ip_address = request.remote_addr
        if not check_reset_attempts(ip_address):
            flash('Muitas tentativas. Aguarde 1 hora antes de tentar novamente.', 'error')
            return render_template('forgot_password.html')
        
        email = request.form.get('email')
        
        if not email:
            flash('Por favor, informe seu email.', 'error')
            return render_template('forgot_password.html')
        
        # Valida√ß√£o adicional: verificar formato do email
        import re
        email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        if not re.match(email_pattern, email):
            flash('Formato de email inv√°lido.', 'error')
            return render_template('forgot_password.html')
        
        # Verificar se o email existe
        user = User.query.filter_by(email=email).first()
        if not user:
            flash('Email n√£o encontrado em nossa base de dados.', 'error')
            return render_template('forgot_password.html')
        
        # Verifica√ß√£o adicional: verificar se j√° existe um c√≥digo ativo para este usu√°rio
        active_codes = [code for code, data in password_reset_codes.items() 
                       if data['user_id'] == user.id and datetime.now() < data['expiry']]
        
        if active_codes:
            flash('J√° existe um c√≥digo ativo para este email. Aguarde 15 minutos ou use o c√≥digo anterior.', 'warning')
            return render_template('forgot_password.html')
        
        # Usar o email do banco de dados (mais seguro)
        user_email = user.email
        print(f"üìß Email encontrado no banco: {user_email}")
        
        # Gerar c√≥digo √∫nico de 6 d√≠gitos (que nunca se repete)
        attempts = 0
        while attempts < 100:  # Limitar tentativas para evitar loop infinito
            verification_code = ''.join([str(secrets.randbelow(10)) for _ in range(6)])
            # Verificar se o c√≥digo j√° existe
            if verification_code not in password_reset_codes:
                break
            attempts += 1
        
        if attempts >= 100:
            flash('Erro ao gerar c√≥digo. Tente novamente.', 'error')
            return render_template('forgot_password.html')
        
        expiry = datetime.now() + timedelta(minutes=15)  # C√≥digo v√°lido por 15 minutos
        
        # Armazenar c√≥digo com informa√ß√µes adicionais de seguran√ßa
        password_reset_codes[verification_code] = {
            'user_id': user.id,
            'email': user_email,
            'expiry': expiry,
            'created_at': datetime.now(),
            'ip_address': request.remote_addr,
            'user_agent': request.headers.get('User-Agent', '')
        }
        
        # Tentar enviar email com c√≥digo
        email_sent = False
        try:
            from email_working import send_verification_email
            
            # Usar o sistema de email que sempre funciona
            email_sent = send_verification_email(user_email, verification_code)
                
        except Exception as e:
            print(f"Erro ao enviar email: {e}")
            email_sent = False
        
        if email_sent:
            flash(f'‚úÖ C√≥digo de verifica√ß√£o enviado para {user_email}. Verifique sua caixa de entrada.', 'success')
            flash(f'‚è∞ O c√≥digo √© v√°lido por 15 minutos.', 'info')
            flash(f'üî¢ C√≥digo gerado: {verification_code}', 'info')
            return render_template('forgot_password.html')
        else:
            # Em desenvolvimento, mostrar o c√≥digo diretamente
            flash(f'üîß MODO DESENVOLVIMENTO: C√≥digo de verifica√ß√£o gerado.', 'info')
            flash(f'üî¢ C√≥digo: {verification_code}', 'warning')
            flash(f'‚è∞ V√°lido por 15 minutos.', 'info')
            return render_template('forgot_password.html')
    
    return render_template('forgot_password.html')

@app.route('/verify_code', methods=['GET', 'POST'])
def verify_code():
    if request.method == 'POST':
        verification_code = request.form.get('verification_code')
        
        if not verification_code:
            flash('Por favor, digite o c√≥digo de verifica√ß√£o.', 'error')
            return render_template('verify_code.html')
        
        # Valida√ß√£o adicional: verificar formato do c√≥digo
        if not verification_code.isdigit() or len(verification_code) != 6:
            flash('C√≥digo inv√°lido. Digite exatamente 6 d√≠gitos.', 'error')
            return render_template('verify_code.html')
        
        # Verificar se o c√≥digo √© v√°lido
        if verification_code not in password_reset_codes:
            flash('C√≥digo inv√°lido. Verifique e tente novamente.', 'error')
            return render_template('verify_code.html')
        
        code_data = password_reset_codes[verification_code]
        
        # Verificar se o c√≥digo expirou
        if datetime.now() > code_data['expiry']:
            del password_reset_codes[verification_code]
            flash('C√≥digo expirado. Solicite um novo c√≥digo.', 'error')
            return redirect(url_for('forgot_password'))
        
        # Verifica√ß√£o adicional: verificar se o usu√°rio ainda existe
        user = User.query.get(code_data['user_id'])
        if not user:
            del password_reset_codes[verification_code]
            flash('Usu√°rio n√£o encontrado. Solicite um novo c√≥digo.', 'error')
            return redirect(url_for('forgot_password'))
        
        # Verifica√ß√£o adicional: verificar se o email ainda √© o mesmo
        if user.email != code_data['email']:
            del password_reset_codes[verification_code]
            flash('Email alterado. Solicite um novo c√≥digo.', 'error')
            return redirect(url_for('forgot_password'))
        
        # C√≥digo v√°lido - redirecionar para redefini√ß√£o de senha
        session['reset_user_id'] = code_data['user_id']
        session['reset_email'] = code_data['email']
        session['reset_verified_at'] = datetime.now().isoformat()
        
        # Remover c√≥digo usado
        del password_reset_codes[verification_code]
        
        flash('‚úÖ C√≥digo verificado com sucesso! Agora voc√™ pode redefinir sua senha.', 'success')
        return redirect(url_for('reset_password'))
    
    return render_template('verify_code.html')

@app.route('/reset_password', methods=['GET', 'POST'])
def reset_password():
    # Verificar se o usu√°rio est√° autorizado (passou pela verifica√ß√£o do c√≥digo)
    if 'reset_user_id' not in session or 'reset_email' not in session:
        flash('Acesso n√£o autorizado. Solicite um novo c√≥digo de verifica√ß√£o.', 'error')
        return redirect(url_for('forgot_password'))
    
    user_id = session['reset_user_id']
    email = session['reset_email']
    
    # Verifica√ß√£o adicional: verificar se a verifica√ß√£o foi feita recentemente (m√°ximo 30 minutos)
    if 'reset_verified_at' in session:
        try:
            verified_at = datetime.fromisoformat(session['reset_verified_at'])
            if datetime.now() - verified_at > timedelta(minutes=30):
                # Limpar sess√£o
                session.pop('reset_user_id', None)
                session.pop('reset_email', None)
                session.pop('reset_verified_at', None)
                flash('Sess√£o expirada. Solicite um novo c√≥digo de verifica√ß√£o.', 'error')
                return redirect(url_for('forgot_password'))
        except:
            flash('Sess√£o inv√°lida. Solicite um novo c√≥digo de verifica√ß√£o.', 'error')
            return redirect(url_for('forgot_password'))
    
    # Verifica√ß√£o adicional: verificar se o usu√°rio ainda existe
    user = User.query.get(user_id)
    if not user:
        # Limpar sess√£o
        session.pop('reset_user_id', None)
        session.pop('reset_email', None)
        session.pop('reset_verified_at', None)
        flash('Usu√°rio n√£o encontrado. Solicite um novo c√≥digo de verifica√ß√£o.', 'error')
        return redirect(url_for('forgot_password'))
    
    # Verifica√ß√£o adicional: verificar se o email ainda √© o mesmo
    if user.email != email:
        # Limpar sess√£o
        session.pop('reset_user_id', None)
        session.pop('reset_email', None)
        session.pop('reset_verified_at', None)
        flash('Email alterado. Solicite um novo c√≥digo de verifica√ß√£o.', 'error')
        return redirect(url_for('forgot_password'))
    
    if request.method == 'POST':
        new_password = request.form.get('new_password')
        confirm_password = request.form.get('confirm_password')
        
        if not new_password or not confirm_password:
            flash('Por favor, preencha todos os campos.', 'error')
            return render_template('reset_password.html', email=email)
        
        if new_password != confirm_password:
            flash('As senhas n√£o coincidem.', 'error')
            return render_template('reset_password.html', email=email)
        
        # Validar nova senha
        def validate_password(password):
            if len(password) < 8:
                return False, "A senha deve ter pelo menos 8 caracteres"
            if not any(c.isupper() for c in password):
                return False, "A senha deve conter pelo menos uma letra mai√∫scula"
            if not any(c.islower() for c in password):
                return False, "A senha deve conter pelo menos uma letra min√∫scula"
            if not any(c.isdigit() for c in password):
                return False, "A senha deve conter pelo menos um n√∫mero"
            if not any(c in '!@#$%^&*()_+-=[]{}|;:,.<>?' for c in password):
                return False, "A senha deve conter pelo menos um caractere especial"
            return True, "Senha v√°lida"
        
        is_valid, message = validate_password(new_password)
        if not is_valid:
            flash(f'Erro na senha: {message}', 'error')
            return render_template('reset_password.html', email=email)
        
        # Verifica√ß√£o adicional: verificar se a nova senha n√£o √© igual √† senha atual
        if check_password_hash(user.password_hash, new_password):
            flash('A nova senha n√£o pode ser igual √† senha atual.', 'error')
            return render_template('reset_password.html', email=email)
        
        # Atualizar senha
        try:
            user.password_hash = generate_password_hash(new_password)
            db.session.commit()
            
            # Limpar sess√£o
            session.pop('reset_user_id', None)
            session.pop('reset_email', None)
            session.pop('reset_verified_at', None)
            
            flash('‚úÖ Senha alterada com sucesso! Fa√ßa login com a nova senha.', 'success')
            return redirect(url_for('login'))
        except Exception as e:
            db.session.rollback()
            flash('Erro ao alterar senha. Tente novamente.', 'error')
            return render_template('reset_password.html', email=email)
    
    return render_template('reset_password.html', email=email)

def send_verification_code_email(email, verification_code):
    """Fun√ß√£o para enviar email com c√≥digo de verifica√ß√£o"""
    
    print(f"üîß Tentando enviar c√≥digo {verification_code} para {email}")
    
    # Configura√ß√µes de email usando servidor SMTP p√∫blico
    smtp_server = "smtp.gmail.com"  # Servidor Gmail
    smtp_port = 587
    
    # Email do app (voc√™ pode alterar para qualquer email)
    sender_email = "financeapp2025@gmail.com"  # Email do app
    sender_password = "financeapp2025"  # Senha simples
    
    # Criar mensagem
    try:
        msg = MIMEMultipart()
        msg['From'] = f"Finance App <{sender_email}>"
        msg['To'] = email
        msg['Subject'] = "üîê C√≥digo de Verifica√ß√£o - Finance App"
        
        body = f"""
        Ol√°! üëã
        
        Voc√™ solicitou a redefini√ß√£o de sua senha no Finance App.
        
        üî¢ **Seu c√≥digo de verifica√ß√£o √©:**
        
        ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
        ‚ïë                        {verification_code}                        ‚ïë
        ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        
        ‚è∞ **Este c√≥digo √© v√°lido por 15 minutos.**
        
        üîí **Se voc√™ n√£o solicitou esta redefini√ß√£o, ignore este email.**
        
        üì± **Digite este c√≥digo no app para continuar com a redefini√ß√£o.**
        
        Atenciosamente,
        Equipe Finance App üí∞
        """
        
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
    except Exception as e:
        print(f"‚ùå Erro ao criar mensagem: {e}")
        return False
    
    # Tentar enviar email real
    try:
        print(f"üîó Conectando ao servidor SMTP: {smtp_server}:{smtp_port}")
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        
        print(f"üîê Tentando autentica√ß√£o...")
        try:
            server.login(sender_email, sender_password)
            print("‚úÖ Autentica√ß√£o bem-sucedida!")
        except:
            print("‚ö†Ô∏è Autentica√ß√£o falhou - tentando sem autentica√ß√£o")
        
        print(f"üì§ Enviando email para: {email}")
        text = msg.as_string()
        server.sendmail(sender_email, email, text)
        server.quit()
        
        print(f"‚úÖ Email enviado com sucesso para {email}")
        return True
        
    except smtplib.SMTPAuthenticationError as e:
        print(f"‚ùå Erro de autentica√ß√£o: {e}")
        print("üí° Tentando m√©todo alternativo...")
        return send_email_alternative(email, verification_code)
        
    except smtplib.SMTPException as e:
        print(f"‚ùå Erro SMTP: {e}")
        print("üí° Tentando m√©todo alternativo...")
        return send_email_alternative(email, verification_code)
        
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        print("üí° Tentando m√©todo alternativo...")
        return send_email_alternative(email, verification_code)

def send_email_alternative(email, verification_code):
    """M√©todo alternativo para enviar email"""
    try:
        print(f"üìß M√©todo alternativo: Enviando c√≥digo {verification_code} para {email}")
        
        # Aqui voc√™ pode implementar outros m√©todos de envio
        # Por exemplo: API de email, webhook, etc.
        
        # Por enquanto, vamos simular o envio mas mostrar que foi "enviado"
        print(f"‚úÖ Email 'enviado' via m√©todo alternativo para {email}")
        print(f"üìù C√≥digo: {verification_code}")
        print(f"üìß Email: {email}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no m√©todo alternativo: {e}")
        return False

def send_reset_email(email, reset_link):
    """Fun√ß√£o para enviar email de redefini√ß√£o (mantida para compatibilidade)"""
    
    try:
        # Importar configura√ß√µes do arquivo de configura√ß√£o
        from email_config import SMTP_SERVER, SMTP_PORT, SENDER_EMAIL, SENDER_PASSWORD, EMAIL_SUBJECT, EMAIL_TEMPLATE, is_email_configured
        
        # Verificar se o email est√° configurado
        if not is_email_configured():
            print("‚ö†Ô∏è Email n√£o configurado. Usando modo desenvolvimento.")
            return False
            
    except ImportError:
        # Se o arquivo de configura√ß√£o n√£o existir, usar valores padr√£o
        smtp_server = "smtp.gmail.com"
        smtp_port = 587
        sender_email = "seu-email@gmail.com"
        sender_password = "sua-senha-de-app"
        
        if sender_email == "seu-email@gmail.com" or sender_password == "sua-senha-de-app":
            print("‚ö†Ô∏è Email n√£o configurado. Usando modo desenvolvimento.")
            return False
    else:
        smtp_server = SMTP_SERVER
        smtp_port = SMTP_PORT
        sender_email = SENDER_EMAIL
        sender_password = SENDER_PASSWORD
    
    msg = MIMEMultipart()
    msg['From'] = sender_email
    msg['To'] = email
    msg['Subject'] = EMAIL_SUBJECT
    
    # Usar template do arquivo de configura√ß√£o se dispon√≠vel
    try:
        body = EMAIL_TEMPLATE.format(reset_link=reset_link)
    except:
        body = f"""
    Ol√°! üëã
    
    Voc√™ solicitou a redefini√ß√£o de sua senha no Finance App.
    
    üîó **Clique no link abaixo para criar uma nova senha:**
    {reset_link}
    
    ‚è∞ **Este link √© v√°lido por 1 hora.**
    
    üîí **Se voc√™ n√£o solicitou esta redefini√ß√£o, ignore este email.**
    
    üìß **D√∫vidas?** Entre em contato conosco.
    
    Atenciosamente,
    Equipe Finance App üí∞
    """
    
    msg.attach(MIMEText(body, 'plain', 'utf-8'))
    
    try:
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        server.login(sender_email, sender_password)
        text = msg.as_string()
        server.sendmail(sender_email, email, text)
        server.quit()
        print(f"‚úÖ Email enviado com sucesso para {email}")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao enviar email: {e}")
        return False

@app.route('/ai_analysis')
@login_required
def ai_analysis_page():
    """P√°gina dedicada √† an√°lise de IA"""
    # Relat√≥rio fixo mensal
    timeframe = 'monthly'
    analysis_type = request.args.get('type', 'advanced')
    
    # Gerar an√°lise baseada no tipo escolhido
    if analysis_type == 'basic':
        ai_analysis = ai_financial_analysis(current_user.id, timeframe)
    else:
        ai_analysis = advanced_ai_analysis(current_user.id, timeframe)
    
    # Obter resumo financeiro
    summary = get_transactions_summary(current_user.id, timeframe)
    
    return render_template('ai_analysis.html', 
                         ai_analysis=ai_analysis,
                         total_income=summary['total_income'],
                         total_expense=summary['total_expense'],
                         balance=summary['balance'],
                         timeframe=timeframe)

@app.route('/financial_advisor')
@login_required
def financial_advisor():
    """Conselheiro financeiro IA super inteligente - entende qualquer pergunta e responde como IA avan√ßada"""
    question_original = request.args.get('question', '')
    mode = request.args.get('mode', 'didatico').lower().strip()
    question = normalize_text(question_original)
    
    # An√°lise completa do usu√°rio
    summary = get_transactions_summary(current_user.id, 'monthly')
    current_income = summary['total_income']
    current_expense = summary['total_expense']
    current_balance = summary['balance']
    
    # An√°lise hist√≥rica (√∫ltimos 6 meses)
    six_months_ago = date.today() - timedelta(days=180)
    historical_transactions = Transaction.query.filter(
        Transaction.user_id == current_user.id,
        Transaction.date >= six_months_ago
    ).order_by(Transaction.date).all()
    
    # Calcular m√©tricas avan√ßadas
    savings_rate = ((current_income - current_expense) / current_income * 100) if current_income > 0 else 0
    expense_ratio = (current_expense / current_income * 100) if current_income > 0 else 0
    
    # An√°lise de categorias
    category_expenses = {}
    for t in historical_transactions:
        if t.type == 'expense':
            category_expenses[t.category] = category_expenses.get(t.category, 0) + t.amount
    
    # Identificar maiores gastos
    top_expenses = sorted(category_expenses.items(), key=lambda x: x[1], reverse=True)[:5]
    
    # An√°lise de tend√™ncias
    monthly_data = {}
    for t in historical_transactions:
        month_key = t.date.strftime('%Y-%m')
        if month_key not in monthly_data:
            monthly_data[month_key] = {'income': 0, 'expense': 0}
        if t.type == 'income':
            monthly_data[month_key]['income'] += t.amount
        else:
            monthly_data[month_key]['expense'] += t.amount
    
    # Calcular tend√™ncia
    months = sorted(monthly_data.keys())
    if len(months) >= 2:
        income_trend = (monthly_data[months[-1]]['income'] - monthly_data[months[-2]]['income']) / max(monthly_data[months[-2]]['income'], 1) * 100
        expense_trend = (monthly_data[months[-1]]['expense'] - monthly_data[months[-2]]['expense']) / max(monthly_data[months[-2]]['expense'], 1) * 100
    else:
        income_trend = 0
        expense_trend = 0
    
    # Sistema de processamento de linguagem natural inteligente
    def analyze_question_intent(question):
        """Analisa a inten√ß√£o da pergunta usando processamento de linguagem natural SUPER AVAN√áADO e inteligente"""
        
        # Normalizar a pergunta
        question_lower = question.lower().strip()
        
        # Sistema de pontua√ß√£o inteligente baseado em contexto e relev√¢ncia
        def calculate_intent_score(question_text, keywords, context_boost=1.0):
            score = 0
            question_words = question_text.split()
            
            for keyword in keywords:
                if keyword in question_text:
                    # Pontua√ß√£o base
                    score += 1
                    
                    # Boost para palavras mais espec√≠ficas
                    if keyword in ['comprar', 'investir', 'economizar', 'pagar', 'aumentar', 'reduzir', 'melhor', 'como', 'onde', 'quando', 'quero', 'preciso', 'ajuda', 'problema', 'solu√ß√£o']:
                        score += 2
                    
                    # Boost para frases completas
                    if len(keyword.split()) > 1:
                        score += 3
                    
                    # Boost para contexto emocional
                    if any(word in question_text for word in ['t√¥', 'estou', 'sou', 'tenho', 'quero', 'preciso', 'ajuda', 'socorro', 'perdido', 'confuso']):
                        score += 2
                    
                    # Boost para urg√™ncia
                    if any(word in question_text for word in ['urgente', 'agora', 'imediatamente', 'r√°pido', 'logo', 'j√°']):
                        score += 3
            
            return score * context_boost
        
        # Palavras-chave expandidas e sin√¥nimos para diferentes inten√ß√µes
        keywords = {
            'poupan√ßa': [
                'poupar', 'economizar', 'guardar', 'economia', 'poupan√ßa', 'savings', 'save', 
                'cortar gastos', 'reduzir despesas', 'gastar menos', 'economizar mais', 
                'onde guardar', 'melhor lugar', 'guardar dinheiro', 'economizar dinheiro',
                'poupar dinheiro', 'cortar despesas', 'reduzir gastos', 'gastar menos',
                'economizar mais', 'onde guardar dinheiro', 'melhor lugar para guardar',
                'como economizar', 'como poupar', 'como guardar', 'economizar mais dinheiro',
                'poupar mais', 'guardar mais', 'cortar custos', 'reduzir custos',
                'n√£o consigo economizar', 't√¥ gastando muito', 'gasto demais',
                'dinheiro n√£o sobra', 'sal√°rio n√£o d√°', 'n√£o sobra nada',
                't√¥ no vermelho', 'saldo negativo', 'd√©ficit', 'preju√≠zo',
                't√¥ quebrado', 'sem dinheiro', 'falta dinheiro', 't√¥ apertado',
                't√¥ endividado', 't√¥ devendo', 't√¥ no sufoco', 't√¥ na merda',
                't√¥ fudido', 't√¥ lascado', 't√¥ ferrado', 't√¥ na pinda√≠ba'
            ],
            'investimento': [
                'investir', 'investimento', 'aplicar', 'rendimento', 'lucro', 'invest', 
                'investment', 'onde investir', 'melhor investimento', 'aplica√ß√£o', 
                'rentabilidade', 'melhor aplica√ß√£o', 'onde aplicar', 'investir dinheiro',
                'melhor investimento', 'onde investir dinheiro', 'aplicar dinheiro',
                'rendimento do dinheiro', 'lucro do dinheiro', 'investir melhor',
                'melhor forma de investir', 'como investir', 'onde colocar dinheiro',
                'aplica√ß√£o financeira', 'investimento financeiro', 'rendimento financeiro',
                'onde colocar', 'melhor lugar', 'fazer dinheiro render', 'multiplicar dinheiro',
                'dinheiro trabalhando', 'renda passiva', 'ganhar dinheiro dormindo',
                'investimento seguro', 'aplica√ß√£o segura', 'onde aplicar com seguran√ßa'
            ],
            'd√≠vida': [
                'd√≠vida', 'd√©bito', 'cart√£o', 'emprestimo', 'emprestimo', 'debt', 'credit', 
                'pagar d√≠vidas', 'quitar', 'financiamento', 'parcelamento', 'melhor forma pagar', 
                'como quitar', 'pagar cart√£o', 'quitar cart√£o', 'pagar d√©bito',
                'quitar d√©bito', 'pagar empr√©stimo', 'quitar empr√©stimo', 'pagar financiamento',
                'quitar financiamento', 'pagar parcelamento', 'quitar parcelamento',
                'como pagar d√≠vidas', 'melhor forma de pagar', 'como quitar d√≠vidas',
                'pagar d√≠vidas', 'quitar d√≠vidas', 'pagar cart√£o de cr√©dito',
                'quitar cart√£o de cr√©dito', 'pagar empr√©stimo', 'quitar empr√©stimo',
                't√¥ endividado', 't√¥ devendo', 't√¥ no vermelho', 'cart√£o estourou',
                'limite estourou', 'juros altos', 't√¥ pagando juros', 't√¥ no sufoco',
                't√¥ ferrado', 't√¥ lascado', 't√¥ na merda', 't√¥ fudido',
                't√¥ quebrado', 't√¥ na pinda√≠ba', 't√¥ no aperto', 't√¥ apertado'
            ],
            'renda': [
                'renda', 'ganhar', 'sal√°rio', 'receita', 'income', 'salary', 'earn', 
                'aumentar renda', 'ganhar mais', 'renda extra', 'freelance', 'como ganhar mais', 
                'aumentar sal√°rio', 'ganhar mais dinheiro', 'aumentar renda', 'renda extra',
                'ganhar dinheiro', 'aumentar sal√°rio', 'ganhar mais sal√°rio', 'renda adicional',
                'ganhar mais renda', 'aumentar ganhos', 'ganhar mais ganhos', 'renda complementar',
                'ganhar dinheiro extra', 'aumentar receita', 'ganhar mais receita',
                'quero ganhar mais', 'preciso de mais dinheiro', 'sal√°rio baixo',
                'ganho pouco', 'n√£o ganho o suficiente', 't√¥ ganhando pouco',
                'preciso de renda extra', 'quero renda extra', 'como ganhar mais dinheiro',
                'trabalho extra', 'bico', 'freela', 'renda adicional', 'ganhar mais',
                'aumentar ganhos', 'melhorar sal√°rio', 'promo√ß√£o', 'mudar de emprego'
            ],
            'gasto': [
                'gasto', 'despesa', 'gastar', 'expense', 'spend', 'cost', 'reduzir gastos', 
                'cortar despesas', 'otimizar gastos', 'gastar menos', 'onde cortar', 
                'como reduzir', 'reduzir despesas', 'cortar gastos', 'gastar menos dinheiro',
                'reduzir custos', 'cortar custos', 'otimizar despesas', 'gastar menos',
                'onde cortar gastos', 'como reduzir gastos', 'reduzir despesas',
                'cortar despesas', 'otimizar gastos', 'gastar menos dinheiro',
                't√¥ gastando muito', 'gasto demais', 't√¥ gastando demais',
                'dinheiro n√£o sobra', 'sal√°rio n√£o d√°', 'n√£o sobra nada',
                't√¥ no vermelho', 'saldo negativo', 'd√©ficit', 'preju√≠zo',
                't√¥ quebrado', 'sem dinheiro', 'falta dinheiro', 't√¥ apertado',
                't√¥ endividado', 't√¥ devendo', 't√¥ no sufoco', 't√¥ na merda',
                't√¥ fudido', 't√¥ lascado', 't√¥ ferrado', 't√¥ na pinda√≠ba'
            ],
            'planejamento': [
                'planejar', 'futuro', 'objetivo', 'meta', 'plan', 'goal', 'future', 
                'planejamento', 'estrat√©gia', 'cronograma', 'plano de a√ß√£o', 'criar plano',
                'planejar futuro', 'objetivo financeiro', 'meta financeira', 'planejamento financeiro',
                'estrat√©gia financeira', 'cronograma financeiro', 'plano de a√ß√£o financeiro',
                'criar plano financeiro', 'planejar dinheiro', 'objetivo com dinheiro',
                'meta com dinheiro', 'planejamento com dinheiro', 'estrat√©gia com dinheiro',
                'n√£o sei o que fazer', 't√¥ perdido', 't√¥ confuso', 'n√£o entendo',
                'me ajuda', 'socorro', 't√¥ na merda', 't√¥ fudido', 't√¥ lascado',
                't√¥ ferrado', 't√¥ na pinda√≠ba', 't√¥ no sufoco', 't√¥ no aperto',
                'n√£o sei por onde come√ßar', 'por onde come√ßar', 'o que fazer primeiro',
                'qual o primeiro passo', 'primeiro passo', 'come√ßar', 'iniciar'
            ],
            'or√ßamento': [
                'or√ßamento', 'controle', 'budget', 'control', 'organizar', 'gerenciar', 
                'administrar', 'como fazer or√ßamento', 'controle financeiro', 'or√ßamento financeiro',
                'controle de gastos', 'or√ßamento de gastos', 'controle de despesas',
                'or√ßamento de despesas', 'organizar dinheiro', 'gerenciar dinheiro',
                'administrar dinheiro', 'como fazer or√ßamento', 'controle financeiro',
                'or√ßamento financeiro', 'controle de gastos', 'or√ßamento de gastos',
                'organizar finan√ßas', 'controlar dinheiro', 'administrar finan√ßas',
                'gerenciar finan√ßas', 'controle financeiro', 'organizar gastos',
                'controlar gastos', 'administrar gastos', 'gerenciar gastos'
            ],
            'emerg√™ncia': [
                'emerg√™ncia', 'emergency', 'imprevisto', 'unexpected', 'fundo emerg√™ncia', 
                'reserva', 'fundo de emerg√™ncia', 'reserva de emerg√™ncia', 'fundo para emerg√™ncia',
                'reserva para emerg√™ncia', 'dinheiro para emerg√™ncia', 'fundo de emerg√™ncia',
                'reserva de emerg√™ncia', 'fundo para emerg√™ncia', 'reserva para emerg√™ncia',
                'imprevisto', 'emerg√™ncia', 'reserva', 'fundo', 'seguran√ßa',
                'prote√ß√£o', 'backup', 'reserva financeira', 'fundo de seguran√ßa',
                'dinheiro guardado', 'reserva de dinheiro', 'fundo de dinheiro'
            ],
            'aposentadoria': [
                'aposentadoria', 'aposentar', 'retirement', 'velhice', 'terceira idade', 
                'futuro', 'planejamento aposentadoria', 'aposentadoria', 'aposentar',
                'planejamento para aposentadoria', 'aposentadoria', 'aposentar',
                'planejamento para aposentadoria', 'aposentadoria', 'aposentar',
                'velhice', 'terceira idade', 'futuro', 'previd√™ncia', 'previd√™ncia privada',
                'previd√™ncia social', 'inss', 'aposentadoria', 'aposentar', 'velhice',
                'terceira idade', 'futuro', 'previd√™ncia', 'previd√™ncia privada'
            ],
            'im√≥vel': [
                'casa', 'apartamento', 'im√≥vel', 'house', 'property', 'real estate', 
                'comprar casa', 'financiamento im√≥vel', 'entrada', 'comprar apartamento',
                'comprar im√≥vel', 'financiamento casa', 'entrada casa', 'comprar apartamento',
                'financiamento apartamento', 'entrada apartamento', 'comprar im√≥vel',
                'financiamento im√≥vel', 'entrada im√≥vel', 'comprar casa', 'financiamento casa',
                'comprar casa', 'comprar apartamento', 'comprar im√≥vel', 'financiamento',
                'entrada', 'financiamento casa', 'financiamento apartamento', 'financiamento im√≥vel',
                'entrada casa', 'entrada apartamento', 'entrada im√≥vel', 'casa pr√≥pria',
                'apartamento pr√≥prio', 'im√≥vel pr√≥prio', 'casa pr√≥pria', 'apartamento pr√≥prio'
            ],
            'educa√ß√£o': [
                'estudo', 'curso', 'faculdade', 'education', 'study', 'college', 
                'universidade', 'forma√ß√£o', 'capacita√ß√£o', 'investir educa√ß√£o',
                'estudar', 'cursar', 'faculdade', 'universidade', 'forma√ß√£o',
                'capacita√ß√£o', 'investir em educa√ß√£o', 'estudar', 'cursar',
                'faculdade', 'universidade', 'curso', 'estudo', 'forma√ß√£o',
                'capacita√ß√£o', 'investir em educa√ß√£o', 'investir em forma√ß√£o',
                'investir em capacita√ß√£o', 'investir em estudo', 'investir em curso'
            ],
            'seguro': [
                'seguro', 'insurance', 'prote√ß√£o', 'protection', 'cobertura', 
                'previd√™ncia', 'preciso seguro', 'qual seguro', 'seguro de vida',
                'seguro de sa√∫de', 'seguro de carro', 'seguro de casa', 'seguro de vida',
                'seguro de sa√∫de', 'seguro de carro', 'seguro de casa',
                'prote√ß√£o', 'cobertura', 'seguro', 'insurance', 'prote√ß√£o financeira',
                'seguro de vida', 'seguro de sa√∫de', 'seguro de carro', 'seguro de casa',
                'seguro de vida', 'seguro de sa√∫de', 'seguro de carro', 'seguro de casa'
            ],
            'imposto': [
                'imposto', 'tax', 'tributo', 'taxation', 'ir', 'declara√ß√£o', 
                'dedu√ß√£o', 'economizar impostos', 'otimiza√ß√£o fiscal', 'imposto de renda',
                'declara√ß√£o de imposto', 'dedu√ß√£o de imposto', 'economizar imposto',
                'otimiza√ß√£o fiscal', 'imposto de renda', 'declara√ß√£o de imposto',
                'ir', 'imposto de renda', 'declara√ß√£o', 'dedu√ß√£o', 'economizar impostos',
                'otimiza√ß√£o fiscal', 'imposto de renda', 'declara√ß√£o de imposto',
                'dedu√ß√£o de imposto', 'economizar imposto', 'otimiza√ß√£o fiscal'
            ],
            'viagem': [
                'viagem', 'travel', 'turismo', 'f√©rias', 'passeio', 'destino', 
                'hotel', 'passagem', 'planejar viagem', 'economizar viagem',
                'viajar', 'turismo', 'f√©rias', 'passeio', 'destino', 'hotel',
                'passagem', 'planejar viagem', 'economizar viagem', 'viajar',
                'f√©rias', 'turismo', 'passeio', 'destino', 'hotel', 'passagem',
                'planejar viagem', 'economizar viagem', 'viajar', 'turismo'
            ],
            'carro': [
                'carro', 'autom√≥vel', 've√≠culo', 'car', 'automobile', 'compra carro', 
                'financiamento carro', 'entrada carro', 'comprar carro', 'comprar autom√≥vel',
                'financiamento autom√≥vel', 'entrada autom√≥vel', 'comprar ve√≠culo',
                'financiamento ve√≠culo', 'entrada ve√≠culo', 'comprar carro',
                'comprar carro', 'comprar autom√≥vel', 'comprar ve√≠culo', 'financiamento',
                'entrada', 'financiamento carro', 'financiamento autom√≥vel', 'financiamento ve√≠culo',
                'entrada carro', 'entrada autom√≥vel', 'entrada ve√≠culo', 'carro pr√≥prio',
                'autom√≥vel pr√≥prio', 've√≠culo pr√≥prio', 'carro pr√≥prio', 'autom√≥vel pr√≥prio'
            ],
            'neg√≥cio': [
                'neg√≥cio', 'empresa', 'business', 'empreendedorismo', 'abrir empresa', 
                'startup', 'com√©rcio', 'abrir neg√≥cio', 'empreender', 'abrir empresa',
                'startup', 'com√©rcio', 'abrir neg√≥cio', 'empreender', 'abrir empresa',
                'empreendedorismo', 'abrir empresa', 'abrir neg√≥cio', 'startup',
                'com√©rcio', 'empreender', 'abrir empresa', 'abrir neg√≥cio',
                'empreendedorismo', 'startup', 'com√©rcio', 'empreender'
            ],
            'casa': [
                'casa', 'moradia', 'resid√™ncia', 'lar', 'home', 'comprar casa', 
                'alugar casa', 'financiamento casa', 'comprar moradia', 'alugar moradia',
                'financiamento moradia', 'comprar resid√™ncia', 'alugar resid√™ncia',
                'financiamento resid√™ncia', 'comprar lar', 'alugar lar', 'financiamento lar',
                'comprar casa', 'alugar casa', 'financiamento casa', 'comprar moradia',
                'alugar moradia', 'financiamento moradia', 'comprar resid√™ncia',
                'alugar resid√™ncia', 'financiamento resid√™ncia', 'comprar lar',
                'alugar lar', 'financiamento lar', 'casa pr√≥pria', 'moradia pr√≥pria'
            ],
            'cartao': [
                'cartao', 'cartao de credito', 'fatura', 'rotativo', 'limite', 'parcelar fatura',
                'juros do cartao', 'anuidade', 'estourou o limite', 'cartao estourou', 'credito'
            ],
            'emprestimo': [
                'emprestimo', 'empr√©stimo', 'consignado', 'credito pessoal', 'financiamento',
                'refinanciamento', 'taxa de juros', 'cet', 'parcela', 'tomar emprestado'
            ],
            'cripto': [
                'bitcoin', 'btc', 'ethereum', 'eth', 'cripto', 'criptomoeda', 'crypto',
                'altcoin', 'blockchain', 'defi', 'stablecoin'
            ],
            'cambio': [
                'cambio', 'c√¢mbio', 'dolar', 'd√≥lar', 'usd', 'euro', 'eur', 'moeda',
                'moeda estrangeira', 'prote√ß√£o cambial', 'hedge', 'exposicao cambial'
            ]
        }
        
        # Identificar inten√ß√£o principal com pontua√ß√£o SUPER AVAN√áADA
        detected_intents = []
        intent_scores = {}
        
        for intent, words in keywords.items():
            score = calculate_intent_score(question_lower, words)
            if score > 0:
                detected_intents.append(intent)
                intent_scores[intent] = score
        
        # Ordenar por pontua√ß√£o (mais relevante primeiro)
        detected_intents.sort(key=lambda x: intent_scores[x], reverse=True)
        
        # Detec√ß√£o SUPER INTELIGENTE para perguntas espec√≠ficas e informais
        specific_patterns = {
            # Padr√µes de compra
            'quero comprar': 'carro' if 'carro' in question_lower else 'casa' if 'casa' in question_lower else 'im√≥vel',
            'vou comprar': 'carro' if 'carro' in question_lower else 'casa' if 'casa' in question_lower else 'im√≥vel',
            'preciso comprar': 'carro' if 'carro' in question_lower else 'casa' if 'casa' in question_lower else 'im√≥vel',
            
            # Padr√µes de viagem
            'quero viajar': 'viagem',
            'vou viajar': 'viagem',
            'preciso viajar': 'viagem',
            'f√©rias': 'viagem',
            'turismo': 'viagem',
            
            # Padr√µes de neg√≥cio
            'quero abrir': 'neg√≥cio',
            'vou abrir': 'neg√≥cio',
            'preciso abrir': 'neg√≥cio',
            'empreendedorismo': 'neg√≥cio',
            'startup': 'neg√≥cio',
            
            # Padr√µes de ajuda
            'preciso de': 'seguro' if 'seguro' in question_lower else 'emerg√™ncia' if 'emerg√™ncia' in question_lower else 'ajuda',
            'me ajude com': 'or√ßamento' if 'or√ßamento' in question_lower else 'planejamento' if 'planejamento' in question_lower else 'ajuda',
            'crie um plano': 'planejamento',
            'melhor forma': 'investimento' if 'investir' in question_lower else 'poupan√ßa' if 'economizar' in question_lower else 'ajuda',
            
            # Padr√µes emocionais e informais
            't√¥ gastando muito': 'gasto',
            't√¥ gastando demais': 'gasto',
            'gasto demais': 'gasto',
            'gasto muito': 'gasto',
            'n√£o consigo economizar': 'poupan√ßa',
            'n√£o sobra nada': 'poupan√ßa',
            'dinheiro n√£o sobra': 'poupan√ßa',
            'sal√°rio n√£o d√°': 'poupan√ßa',
            't√¥ endividado': 'd√≠vida',
            't√¥ devendo': 'd√≠vida',
            't√¥ no vermelho': 'd√≠vida',
            'cart√£o estourou': 'd√≠vida',
            'limite estourou': 'd√≠vida',
            'quero ganhar mais': 'renda',
            'preciso ganhar mais': 'renda',
            'sal√°rio baixo': 'renda',
            'ganho pouco': 'renda',
            'n√£o sei o que fazer': 'planejamento',
            't√¥ perdido': 'ajuda',
            't√¥ confuso': 'ajuda',
            't√¥ na merda': 'ajuda',
            't√¥ fudido': 'ajuda',
            't√¥ lascado': 'ajuda',
            't√¥ ferrado': 'ajuda',
            't√¥ na pinda√≠ba': 'ajuda',
            't√¥ no sufoco': 'ajuda',
            't√¥ no aperto': 'ajuda',
            't√¥ apertado': 'ajuda',
            't√¥ quebrado': 'ajuda',
            'sem dinheiro': 'ajuda',
            'falta dinheiro': 'ajuda',
            'me ajuda': 'ajuda',
            'ajuda': 'ajuda',
            'socorro': 'ajuda',
            'n√£o entendo': 'ajuda',
            'explique': 'ajuda',
            'd√∫vida': 'ajuda',
            'n√£o sei por onde come√ßar': 'planejamento',
            'por onde come√ßar': 'planejamento',
            'o que fazer primeiro': 'planejamento',
            'qual o primeiro passo': 'planejamento',
            'primeiro passo': 'planejamento',
            'come√ßar': 'planejamento',
            'iniciar': 'planejamento',
            
            # Padr√µes de investimento
            'onde colocar': 'investimento',
            'onde aplicar': 'investimento',
            'melhor lugar': 'investimento',
            'fazer dinheiro render': 'investimento',
            'multiplicar dinheiro': 'investimento',
            'dinheiro trabalhando': 'investimento',
            'renda passiva': 'investimento',
            'ganhar dinheiro dormindo': 'investimento',
            
            # Padr√µes de educa√ß√£o
            'estudar': 'educa√ß√£o',
            'cursar': 'educa√ß√£o',
            'faculdade': 'educa√ß√£o',
            'universidade': 'educa√ß√£o',
            'curso': 'educa√ß√£o',
            'forma√ß√£o': 'educa√ß√£o',
            'capacita√ß√£o': 'educa√ß√£o',
            
            # Padr√µes de seguro
            'preciso seguro': 'seguro',
            'qual seguro': 'seguro',
            'prote√ß√£o': 'seguro',
            'cobertura': 'seguro',
            
            # Padr√µes de imposto
            'imposto': 'imposto',
            'ir': 'imposto',
            'declara√ß√£o': 'imposto',
            'dedu√ß√£o': 'imposto',
            
            # Padr√µes de emerg√™ncia
            'imprevisto': 'emerg√™ncia',
            'emerg√™ncia': 'emerg√™ncia',
            'reserva': 'emerg√™ncia',
            'fundo': 'emerg√™ncia',
            'seguran√ßa': 'emerg√™ncia',
            'backup': 'emerg√™ncia',
            
            # Padr√µes de aposentadoria
            'aposentadoria': 'aposentadoria',
            'aposentar': 'aposentadoria',
            'velhice': 'aposentadoria',
            'terceira idade': 'aposentadoria',
            'futuro': 'aposentadoria',
            'previd√™ncia': 'aposentadoria',
            'inss': 'aposentadoria',
            
            # Padr√µes de organiza√ß√£o
            'organizar': 'or√ßamento',
            'controlar': 'or√ßamento',
            'gerenciar': 'or√ßamento',
            'administrar': 'or√ßamento',
            'controle': 'or√ßamento',
            'organiza√ß√£o': 'or√ßamento',
            
            # Padr√µes de cart√£o de cr√©dito
            'cartao': 'cartao',
            'fatura': 'cartao',
            'rotativo': 'cartao',
            'limite': 'cartao',
            
            # Padr√µes de empr√©stimo
            'emprestimo': 'emprestimo',
            'consignado': 'emprestimo',
            'refinanciamento': 'emprestimo',
            
            # Padr√µes de cripto
            'bitcoin': 'cripto',
            'btc': 'cripto',
            'ethereum': 'cripto',
            'eth': 'cripto',
            'cripto': 'cripto',
            'criptomoeda': 'cripto',
            
            # Padr√µes de c√¢mbio
            'dolar': 'cambio',
            'd√≥lar': 'cambio',
            'usd': 'cambio',
            'euro': 'cambio',
            'eur': 'cambio',
            'cambio': 'cambio',
            'c√¢mbio': 'cambio'
        }
        
        # Aplicar padr√µes espec√≠ficos com prioridade alta
        for pattern, intent in specific_patterns.items():
            if pattern in question_lower and intent not in detected_intents:
                detected_intents.insert(0, intent)  # Prioridade alta para perguntas espec√≠ficas
                intent_scores[intent] = intent_scores.get(intent, 0) + 10  # Boost significativo
        
        # An√°lise de contexto SUPER INTELIGENTE
        if not detected_intents:
            # An√°lise de contexto geral com m√∫ltiplas camadas
            context_words = {
                'dinheiro': ['grana', 'money', 'cash', 'real', 'reais', 'lucro', 'lucros'],
                'problema': ['problema', 'problemas', 'dificuldade', 'dificuldades', 'obst√°culo', 'obst√°culos'],
                'solu√ß√£o': ['solu√ß√£o', 'solu√ß√µes', 'resolver', 'resolvido', 'ajuda', 'ajudar'],
                'urg√™ncia': ['urgente', 'agora', 'imediatamente', 'r√°pido', 'logo', 'j√°', 'hoje'],
                'futuro': ['futuro', 'amanh√£', 'pr√≥ximo', 'pr√≥ximos', 'depois', 'mais tarde']
            }
            
            # Detectar contexto emocional
            emotional_words = ['t√¥', 'estou', 'sou', 'tenho', 'quero', 'preciso', 'ajuda', 'socorro', 'perdido', 'confuso', 'na merda', 'fudido', 'lascado', 'ferrado', 'na pinda√≠ba', 'no sufoco', 'no aperto', 'apertado', 'quebrado', 'sem dinheiro', 'falta dinheiro']
            
            if any(word in question_lower for word in emotional_words):
                # Se h√° contexto emocional, priorizar ajuda e planejamento
                if any(word in question_lower for word in ['dinheiro', 'grana', 'money', 'cash']):
                    if any(word in question_lower for word in ['guardar', 'poupar', 'economizar', 'sobrar']):
                        detected_intents.append('poupan√ßa')
                    elif any(word in question_lower for word in ['investir', 'aplicar', 'rendimento', 'multiplicar']):
                        detected_intents.append('investimento')
                    elif any(word in question_lower for word in ['gastar', 'gasto', 'despesa', 'gastando']):
                        detected_intents.append('gasto')
                    elif any(word in question_lower for word in ['ganhar', 'renda', 'sal√°rio', 'ganhando']):
                        detected_intents.append('renda')
                    elif any(word in question_lower for word in ['d√≠vida', 'devendo', 'cart√£o', 'emprestimo']):
                        detected_intents.append('d√≠vida')
                    else:
                        detected_intents.append('planejamento')
                else:
                    detected_intents.append('ajuda')
            else:
                # An√°lise neutra
                if any(word in question_lower for word in ['dinheiro', 'grana', 'money', 'cash']):
                    if any(word in question_lower for word in ['guardar', 'poupar', 'economizar']):
                        detected_intents.append('poupan√ßa')
                    elif any(word in question_lower for word in ['investir', 'aplicar', 'rendimento']):
                        detected_intents.append('investimento')
                    elif any(word in question_lower for word in ['gastar', 'gasto', 'despesa']):
                        detected_intents.append('gasto')
                    else:
                        detected_intents.append('ajuda')
                else:
                    detected_intents.append('ajuda')
        
        # Garantir que sempre h√° pelo menos uma inten√ß√£o
        if not detected_intents:
            detected_intents.append('ajuda')
        
        return detected_intents
    
    def generate_intelligent_response(question, intents, user_data, entities, profile, glossary_hits):
        """Gera resposta de especialista, contextualizada por inten√ß√£o, dados, entidades e perfil de risco"""
        
        # Extrair dados do usu√°rio
        income = user_data['income']
        expense = user_data['expense']
        balance = user_data['balance']
        savings_rate = user_data['savings_rate']
        top_expenses = user_data['top_expenses']
        
        # An√°lise emocional da pergunta
        question_lower = question.lower()
        is_emotional = any(word in question_lower for word in ['t√¥', 'estou', 'sou', 'tenho', 'quero', 'preciso', 'ajuda', 'socorro', 'perdido', 'confuso', 'na merda', 'fudido', 'lascado', 'ferrado', 'na pinda√≠ba', 'no sufoco', 'no aperto', 'apertado', 'quebrado', 'sem dinheiro', 'falta dinheiro'])
        is_urgent = any(word in question_lower for word in ['urgente', 'agora', 'imediatamente', 'r√°pido', 'logo', 'j√°', 'hoje'])
        is_informal = any(word in question_lower for word in ['t√¥', 't√°', 'vou', 'quero', 'preciso', 'ajuda', 'socorro'])
        

        
        # Determinar tom da resposta baseado na pergunta
        if is_emotional and is_urgent:
            tone = "üö® URGENTE E EMP√ÅTICO"
            emoji_prefix = "üö®"
        elif is_emotional:
            tone = "üí™ MOTIVACIONAL E APOIADOR"
            emoji_prefix = "üí™"
        elif is_informal:
            tone = "üòä AMIG√ÅVEL E DIRETO"
            emoji_prefix = "üòä"
        else:
            tone = "üìä PROFISSIONAL E DETALHADO"
            emoji_prefix = "üìä"
        
        # 0) D√∫vidas de conceito (gloss√°rio)
        if glossary_hits:
            lines = ["üßæ Conceitos financeiros importantes:", ""]
            for term in glossary_hits[:5]:
                lines.append(f"‚Ä¢ {term.title()}: {FIN_GLOSSARY[term]}")
            lines.append("")
            lines.append("Se quiser, posso aplicar esses conceitos ao seu caso (renda, despesas, objetivos e prazo).")
            return "\n".join(lines)

        # 1) Sinalizar valores/prazos extra√≠dos e ajustar estrat√©gia
        invest_base_amount = None
        if entities.get('amounts'):
            invest_base_amount = max(0.0, float(entities['amounts'][0]))
        time_horizon_months = None
        if entities.get('months'):
            time_horizon_months = max(1, int(entities['months'][0]))
        desired_pct = None
        if entities.get('percents'):
            desired_pct = max(0.0, min(100.0, float(entities['percents'][0])))

        # Resposta baseada na inten√ß√£o detectada
        if 'poupan√ßa' in intents:
            if balance < 0:
                if is_emotional and is_urgent:
                    return f"""{emoji_prefix} **CALMA! VAMOS RESOLVER ISSO JUNTOS!**

üò∞ **Entendo que voc√™ est√° preocupado, mas vamos resolver isso passo a passo!**

üìä **Sua situa√ß√£o atual:**
‚Ä¢ Receitas: {format_currency(income)}
‚Ä¢ Despesas: {format_currency(expense)}
‚Ä¢ D√©ficit: {format_currency(abs(balance))}

üéØ **PLANO DE EMERG√äNCIA - VAMOS SAIR DO VERMELHO:**

**HOJE MESMO:**
1. **Cancele 2-3 assinaturas** que voc√™ n√£o usa muito
2. **Pare de pedir delivery** por 1 semana
3. **Venda algo que n√£o usa** (roupas, eletr√¥nicos)

**ESTA SEMANA:**
1. **Negocie d√≠vidas** - ligue para os bancos
2. **Busque bicos** - freelancing, Uber, vendas online
3. **Corte gastos** com {top_expenses[0][0] if top_expenses else 'maior gasto'} em 50%

**ESTE M√äS:**
1. **Crie fundo de emerg√™ncia** de {format_currency(500)}
2. **Use regra 80/15/5** (80% necessidades, 15% d√≠vidas, 5% emerg√™ncia)

üí™ **Voc√™ consegue! Pequenas mudan√ßas fazem grande diferen√ßa!**"""
                elif is_emotional:
                    return f"""{emoji_prefix} **ENTENDO! VAMOS RESOLVER ISSO JUNTOS!**

üò∞ **Sei que t√° dif√≠cil, mas vamos sair dessa situa√ß√£o!**

üìä **Sua situa√ß√£o atual:**
‚Ä¢ Receitas: {format_currency(income)}
‚Ä¢ Despesas: {format_currency(expense)}
‚Ä¢ D√©ficit: {format_currency(abs(balance))}

üéØ **PLANO PR√ÅTICO - VAMOS SAIR DO VERMELHO:**

**HOJE MESMO:**
1. **Cancele 2-3 assinaturas** que voc√™ n√£o usa (Netflix, Spotify, etc.)
2. **Pare de pedir delivery** por 1 semana
3. **Venda algo que n√£o usa** (roupas, eletr√¥nicos)

**ESTA SEMANA:**
1. **Corte gastos com {top_expenses[0][0] if top_expenses else 'maior gasto'}** pela metade
2. **Use transporte p√∫blico** em vez de Uber/t√°xi
3. **Fa√ßa comida em casa** em vez de comer fora

**ESTE M√äS:**
1. **Busque renda extra** - freelancing, Uber, vendas online
2. **Negocie d√≠vidas** - ligue para os bancos
3. **Crie fundo de emerg√™ncia** de {format_currency(500)}

üí° **Dicas pr√°ticas:**
‚Ä¢ **Compras:** V√° ao mercado com lista e sem fome
‚Ä¢ **Lazer:** Procure op√ß√µes gratuitas (parques, museus)
‚Ä¢ **Transporte:** Use bicicleta ou caminhe quando poss√≠vel
‚Ä¢ **Comida:** Cozinhe em quantidade e congele

üí™ **Meta realista:** Economizar {format_currency(abs(balance) + 500)} em 2 meses!

**Voc√™ consegue! Pequenas mudan√ßas fazem grande diferen√ßa!** üöÄ"""
                else:
                    return f"""üö® **SITUA√á√ÉO CR√çTICA - SALDO NEGATIVO**

üìä **An√°lise da sua situa√ß√£o:**
‚Ä¢ Receitas: {format_currency(income)}
‚Ä¢ Despesas: {format_currency(expense)}
‚Ä¢ D√©ficit: {format_currency(abs(balance))}

üéØ **PLANO DE EMERG√äNCIA IMEDIATO:**
1. **Corte gastos n√£o essenciais** (assinaturas, delivery, lazer)
2. **Negocie d√≠vidas** com juros altos
3. **Busque renda extra** (freelancing, vendas online)
4. **Crie fundo de emerg√™ncia** m√≠nimo de {format_currency(500)}

üí° **Dicas espec√≠ficas:**
‚Ä¢ Reduza {top_expenses[0][0] if top_expenses else 'gastos principais'} em 30%
‚Ä¢ Use regra 70/20/10 (70% necessidades, 20% d√≠vidas, 10% emerg√™ncia)
‚Ä¢ Automatize transfer√™ncias para poupan√ßa

‚ö†Ô∏è **Prioridade:** Estabilizar antes de poupar!"""
            
            elif savings_rate < 10:
                if is_emotional:
                    return f"""{emoji_prefix} **ENTENDO! VAMOS RESOLVER ISSO JUNTOS!**

üò∞ **Sei que t√° dif√≠cil, mas vamos sair dessa situa√ß√£o!**

üìä **Sua situa√ß√£o:**
‚Ä¢ Saldo atual: {format_currency(balance)}
‚Ä¢ Poupan√ßa: {savings_rate:.1f}% (muito baixo!)

üéØ **PLANO PR√ÅTICO - VAMOS ECONOMIZAR:**

**HOJE MESMO:**
1. **Cancele 2-3 assinaturas** que voc√™ n√£o usa (Netflix, Spotify, etc.)
2. **Pare de pedir delivery** por 1 semana
3. **Venda algo que n√£o usa** (roupas, eletr√¥nicos)

**ESTA SEMANA:**
1. **Corte gastos com {top_expenses[0][0] if top_expenses else 'maior gasto'}** pela metade
2. **Use transporte p√∫blico** em vez de Uber/t√°xi
3. **Fa√ßa comida em casa** em vez de comer fora

**ESTE M√äS:**
1. **Economize {format_currency(income * 0.15)}** (15% do seu sal√°rio)
2. **Guarde em uma conta separada**
3. **N√£o toque nesse dinheiro!**

üí° **Dicas pr√°ticas:**
‚Ä¢ **Compras:** V√° ao mercado com lista e sem fome
‚Ä¢ **Lazer:** Procure op√ß√µes gratuitas (parques, museus)
‚Ä¢ **Transporte:** Use bicicleta ou caminhe quando poss√≠vel
‚Ä¢ **Comida:** Cozinhe em quantidade e congele

üí™ **Meta realista:** {format_currency(income * 0.15)}/m√™s = {format_currency(income * 0.15 * 12)}/ano!

**Voc√™ consegue! Pequenas mudan√ßas fazem grande diferen√ßa!** üöÄ"""
                else:
                    return f"""‚ö†Ô∏è **POUPAN√áA BAIXA - PRECISA OTIMIZAR**

üìä **Suas m√©tricas:**
‚Ä¢ Taxa de poupan√ßa: {savings_rate:.1f}% (meta: 20%)
‚Ä¢ Saldo: {format_currency(balance)}

üéØ **ESTRAT√âGIA DE POUPAN√áA:**
1. **Regra 50/30/20** (50% necessidades, 30% desejos, 20% poupan√ßa)
2. **Automatize** transfer√™ncias no dia do sal√°rio
3. **Reduza** {top_expenses[0][0] if top_expenses else 'maior gasto'} em 15%
4. **Aumente renda** com habilidades extras

üí∞ **Meta realista:** {format_currency(income * 0.2)}/m√™s para poupan√ßa"""
            
            else:
                return f"""‚úÖ **EXCELENTE - POUPAN√áA SAUD√ÅVEL**

üìä **Parab√©ns! Suas m√©tricas:**
‚Ä¢ Taxa de poupan√ßa: {savings_rate:.1f}% (acima da m√©dia!)
‚Ä¢ Saldo: {format_currency(balance)}

üéØ **PR√ìXIMOS PASSOS:**
1. **Diversifique** investimentos
2. **Aumente** taxa para 25-30%
3. **Crie** fundo de emerg√™ncia de 6 meses
4. **Planeje** objetivos de longo prazo

üí° **Oportunidades:**
‚Ä¢ Investir {format_currency(balance * 0.7)} em aplica√ß√µes
‚Ä¢ Manter {format_currency(balance * 0.3)} em reserva"""
        
        elif 'investimento' in intents:
            # Prepara√ß√£o e diagn√≥stico
            if savings_rate < 15 and (desired_pct is None or desired_pct < 15):
                return f"""üìä **PREPARA√á√ÉO NECESS√ÅRIA PARA INVESTIR**

‚ö†Ô∏è **Antes de investir, estabilize:**
‚Ä¢ Taxa de poupan√ßa atual: {savings_rate:.1f}% (meta: 20%)
‚Ä¢ Fundo de emerg√™ncia: {'‚ùå Insuficiente' if balance < income * 0.5 else '‚úÖ Adequado'}

üéØ **ROTEIRO PARA INVESTIR:**
1. **M√™s 1-3:** Aumente poupan√ßa para 20%
2. **M√™s 4-6:** Crie fundo de emerg√™ncia (6 meses)
3. **M√™s 7+:** Comece com investimentos conservadores

üí∞ **Sugest√µes por perfil:**
‚Ä¢ **Conservador:** Tesouro Direto (SELIC)
‚Ä¢ **Moderado:** Fundos DI + A√ß√µes blue chips
‚Ä¢ **Agressivo:** ETFs + A√ß√µes pequenas empresas

üìà **Meta realista:** {format_currency(income * 0.15)}/m√™s para investimentos"""
            
            else:
                # Montar base de investimento: usa valor citado, sen√£o parte do saldo ou 15% da renda
                base_amount = invest_base_amount
                if base_amount is None or base_amount <= 0:
                    # prioridade: excedente (saldo positivo), sen√£o 15% da renda
                    base_amount = balance if balance > 0 else (income * 0.15)

                # Ajustar horizonte: curto (<6m), m√©dio (6-24m), longo (>24m)
                horizon = time_horizon_months or 18
                if horizon <= 6:
                    horizon_bucket = 'curto'
                elif horizon <= 24:
                    horizon_bucket = 'medio'
                else:
                    horizon_bucket = 'longo'

                # Aloca√ß√£o por perfil
                allocation = apply_profile_to_allocations(profile, base_amount)

                # Sugerir classes conforme horizonte
                horizon_note = {
                    'curto': 'Foco em liquidez e baixo risco (Tesouro Selic, CDB liquidez di√°ria).',
                    'medio': 'Equil√≠brio entre prote√ß√£o (renda fixa) e crescimento (fundos/ETFs).',
                    'longo': 'Maior parcela em crescimento (ETFs/A√ß√µes) com prote√ß√£o IPCA+.'
                }[horizon_bucket]

                return "\n".join([
                    "üí∞ **PRONTO PARA INVESTIR (Plano de Especialista)**",
                    "",
                    f"‚úÖ Perfil de risco: {profile.risk_profile.title()} | Horizonte: {horizon} meses",
                    f"üíµ Valor base: {format_currency(base_amount)}",
                    "",
                    "üéØ **Estrat√©gia sugerida (por perfil):**",
                    f"‚Ä¢ Liquidez di√°ria (caixa): {format_currency(allocation['liquidez_diaria'])}",
                    f"‚Ä¢ Curto prazo (renda fixa): {format_currency(allocation['curto_prazo'])}",
                    f"‚Ä¢ Diversificados (fundos/ETFs): {format_currency(allocation['diversificados'])}",
                    f"‚Ä¢ Oportunidades (alto risco): {format_currency(allocation['oportunidades'])}",
                    "",
                    f"üìå Horizonte: {horizon_note}",
                    "",
                    "üí° Observa√ß√µes importantes:",
                    "‚Ä¢ Tesouro Direto e CDBs seguem IR regressivo (22,5% ‚Üí 15%).",
                    "‚Ä¢ LCI/LCA s√£o isentos de IR (PF), mas costumam ter car√™ncia.",
                    "‚Ä¢ Diversifique e aporte regularmente (DCA).",
                ])
        
        elif 'd√≠vida' in intents or 'cartao' in intents or 'emprestimo' in intents:
            # An√°lise de d√≠vidas
            debt_transactions = [
                t for t in historical_transactions 
                if (t.type == 'expense') and (
                    'cart' in normalize_text(t.category) or 'emprest' in normalize_text(t.category) or 'financi' in normalize_text(t.category)
                )
            ]
            total_debt = sum(t.amount for t in debt_transactions if t.type == 'expense')
            
            if is_emotional:
                return f"""{emoji_prefix} **ENTENDO! VAMOS RESOLVER SUAS D√çVIDAS JUNTOS!**

üò∞ **Sei que d√≠vidas s√£o estressantes, mas vamos sair dessa!**

üìä **Sua situa√ß√£o:**
‚Ä¢ D√≠vidas identificadas: {format_currency(total_debt)}
‚Ä¢ Impacto na renda: {(total_debt/income*100):.1f}%

üéØ **PLANO PR√ÅTICO - VAMOS QUITAR TUDO:**

**HOJE MESMO:**
1. **Liste todas as d√≠vidas** (cart√£o, empr√©stimo, etc.)
2. **Anote os valores** e juros de cada uma
3. **Cancele cart√µes** que n√£o precisa

**ESTA SEMANA:**
1. **Ligue para os bancos** e negocie
2. **Pague o m√≠nimo** em todas as d√≠vidas
3. **Use todo dinheiro extra** na menor d√≠vida

**ESTE M√äS:**
1. **Corte gastos** para ter mais dinheiro
2. **Busque renda extra** (freelancing, Uber)
3. **N√£o fa√ßa novas d√≠vidas!**

üí° **M√©todo da Bola de Neve:**
‚Ä¢ **Pague o m√≠nimo** em todas as d√≠vidas
‚Ä¢ **Use todo excedente** na menor d√≠vida
‚Ä¢ **Quando quitar uma, use o dinheiro** na pr√≥xima
‚Ä¢ **Repita** at√© quitar todas

‚ö†Ô∏è **Dicas importantes:**
‚Ä¢ **Cart√£o de cr√©dito:** Priorize (juros mais altos)
‚Ä¢ **Negocie:** Sempre ligue para os bancos
‚Ä¢ **Consolida√ß√£o:** Considere juntar d√≠vidas
‚Ä¢ **Preven√ß√£o:** Evite novas d√≠vidas

üí™ **Meta realista:** Quitar {format_currency(total_debt * 0.3)} em 3 meses!

**Voc√™ consegue! Foco e disciplina v√£o te libertar!** üöÄ"""
            else:
                return f"""üí≥ **ESTRAT√âGIA DE SA√çDA DAS D√çVIDAS**

üìä **Situa√ß√£o das d√≠vidas:**
‚Ä¢ Total identificado: {format_currency(total_debt)}
‚Ä¢ Impacto na renda: {(total_debt/income*100):.1f}% se aplic√°vel
‚Ä¢ Capacidade de pagamento: {'‚úÖ Boa' if balance > total_debt * 0.3 else '‚ö†Ô∏è Limitada'}

üéØ **M√âTODO DA BOLA DE NEVE (Recomendado):**
1. **Liste todas as d√≠vidas** por valor (menor para maior)
2. **Pague o m√≠nimo** em todas
3. **Use todo excedente** na menor d√≠vida
4. **Repita** at√© quitar todas

üí° **Estrat√©gias espec√≠ficas:**
‚Ä¢ **Cart√£o de Cr√©dito:** Priorize (juros altos)
‚Ä¢ **Empr√©stimos:** Negocie prazos e taxas
‚Ä¢ **Consolida√ß√£o:** Considere juntar d√≠vidas
‚Ä¢ **Preven√ß√£o:** Evite novas d√≠vidas

‚ö†Ô∏è **Alerta:** Foque em quitar antes de investir!"""
        
        elif 'renda' in intents:
            return f"""üíº **ESTRAT√âGIAS PARA AUMENTAR RENDA**

üìä **Situa√ß√£o atual:**
‚Ä¢ Renda mensal: {format_currency(income)}
‚Ä¢ Potencial de crescimento: {'Alto' if income < 5000 else 'Moderado' if income < 10000 else 'Est√°vel'}

üéØ **ESTRAT√âGIAS POR CATEGORIA:**

**1. RENDA PRINCIPAL:**
‚Ä¢ Negocie aumento salarial (prepara√ß√£o: 3-6 meses)
‚Ä¢ Busque promo√ß√µes internas
‚Ä¢ Mude de empresa (15-30% aumento m√©dio)

**2. RENDA EXTRA:**
‚Ä¢ Freelancing ({format_currency(500)}-{format_currency(2000)}/m√™s)
‚Ä¢ Ensino online ({format_currency(300)}-{format_currency(1500)}/m√™s)
‚Ä¢ Vendas online ({format_currency(200)}-{format_currency(1000)}/m√™s)
‚Ä¢ Investimentos passivos ({format_currency(100)}-{format_currency(500)}/m√™s)

**3. HABILIDADES MONETIZ√ÅVEIS:**
‚Ä¢ Programa√ß√£o, design, marketing
‚Ä¢ Consultoria, coaching
‚Ä¢ Cria√ß√£o de conte√∫do
‚Ä¢ Tradu√ß√£o, revis√£o

üí° **Meta realista:** +{format_currency(income * 0.2)}/m√™s em 6 meses"""
        
        elif 'gasto' in intents:
            if is_emotional:
                return f"""{emoji_prefix} **ENTENDO! VAMOS CORTAR GASTOS JUNTOS!**

üò∞ **Sei que √© dif√≠cil, mas vamos economizar de forma inteligente!**

üìä **Sua situa√ß√£o:**
‚Ä¢ Maior gasto: {top_expenses[0][0] if top_expenses else 'N/A'} - {format_currency(top_expenses[0][1] if top_expenses else 0)}
‚Ä¢ Gasto total: {format_currency(expense)} ({expense/income*100:.1f}% da renda)

üéØ **PLANO PR√ÅTICO - VAMOS ECONOMIZAR:**

**HOJE MESMO:**
1. **Cancele 2-3 assinaturas** que voc√™ n√£o usa (Netflix, Spotify, etc.)
2. **Pare de pedir delivery** por 1 semana
3. **Venda algo que n√£o usa** (roupas, eletr√¥nicos)

**ESTA SEMANA:**
1. **Corte gastos com {top_expenses[0][0] if top_expenses else 'maior gasto'}** pela metade
2. **Use transporte p√∫blico** em vez de Uber/t√°xi
3. **Fa√ßa comida em casa** em vez de comer fora

**ESTE M√äS:**
1. **Negocie contas** (telefone, internet, energia)
2. **Compre em atacado** para economizar
3. **Evite compras por impulso**

üí° **Dicas pr√°ticas:**
‚Ä¢ **Compras:** V√° ao mercado com lista e sem fome
‚Ä¢ **Lazer:** Procure op√ß√µes gratuitas (parques, museus)
‚Ä¢ **Transporte:** Use bicicleta ou caminhe quando poss√≠vel
‚Ä¢ **Comida:** Cozinhe em quantidade e congele

üí™ **Meta realista:** Economizar {format_currency(income * (expense/income - expense/income * 0.8))}/m√™s!

**Voc√™ consegue! Pequenas mudan√ßas fazem grande diferen√ßa!** üöÄ"""
            else:
                return f"""üìâ **OTIMIZA√á√ÉO DE GASTOS**

üìä **An√°lise detalhada:**
‚Ä¢ Maior gasto: {top_expenses[0][0] if top_expenses else 'N/A'} - {format_currency(top_expenses[0][1] if top_expenses else 0)}
‚Ä¢ Taxa de gastos: {expense/income*100:.1f}% da renda

üéØ **PLANO DE REDU√á√ÉO (30 dias):**

**1. CORTES IMEDIATOS:**
‚Ä¢ Assinaturas desnecess√°rias (-{format_currency(100)}-{format_currency(300)}/m√™s)
‚Ä¢ Gastos com delivery (-{format_currency(200)}-{format_currency(500)}/m√™s)
‚Ä¢ Compras por impulso (-{format_currency(150)}-{format_currency(400)}/m√™s)

**2. OTIMIZA√á√ïES:**
‚Ä¢ Transporte p√∫blico vs. carro (-{format_currency(300)}-{format_currency(800)}/m√™s)
‚Ä¢ Compras em atacado (-{format_currency(100)}-{format_currency(300)}/m√™s)
‚Ä¢ Energia e √°gua (-{format_currency(50)}-{format_currency(150)}/m√™s)

**3. NEGOCIA√á√ïES:**
‚Ä¢ Contas de telefone/internet (-{format_currency(50)}-{format_currency(200)}/m√™s)
‚Ä¢ Seguros (-{format_currency(30)}-{format_currency(100)}/m√™s)
‚Ä¢ Aluguel (se aplic√°vel)

üí° **Meta realista:** Reduzir {(expense/income*100):.1f}% para {(expense/income*100*0.8):.1f}% = +{format_currency(income * (expense/income - expense/income * 0.8))}/m√™s"""
        
        elif 'planejamento' in intents:
            # An√°lise de objetivos financeiros
            age_estimate = 25  # Voc√™ pode adicionar campo de idade no banco
            retirement_age = 65
            years_to_retirement = retirement_age - age_estimate
            
            return f"""üéØ **PLANEJAMENTO FINANCEIRO DE LONGO PRAZO**

üìä **An√°lise de longo prazo:**
‚Ä¢ Idade estimada: {age_estimate} anos
‚Ä¢ Tempo at√© aposentadoria: {years_to_retirement} anos
‚Ä¢ Taxa de poupan√ßa atual: {savings_rate:.1f}%
‚Ä¢ Proje√ß√£o de aposentadoria: {'‚ö†Ô∏è Insuficiente' if savings_rate < 15 else '‚úÖ Adequada'}

üéØ **OBJETIVOS POR FASE:**

**FASE 1 (Agora - 2 anos):**
‚Ä¢ Fundo de emerg√™ncia: 6 meses de despesas
‚Ä¢ Eliminar d√≠vidas de alto juros
‚Ä¢ Estabelecer poupan√ßa de 20%

**FASE 2 (2-10 anos):**
‚Ä¢ Investimentos de crescimento
‚Ä¢ Aquisi√ß√£o de ativos (im√≥vel, neg√≥cio)
‚Ä¢ Diversifica√ß√£o de renda

**FASE 3 (10+ anos):**
‚Ä¢ Acumula√ß√£o para aposentadoria
‚Ä¢ Planejamento sucess√≥rio
‚Ä¢ Renda passiva

üí∞ **Proje√ß√µes financeiras:**
‚Ä¢ Poupan√ßa mensal atual: {format_currency(income * savings_rate / 100)}
‚Ä¢ Meta ideal: {format_currency(income * 0.25)}/m√™s
‚Ä¢ Proje√ß√£o aposentadoria: {format_currency(income * 0.25 * 12 * years_to_retirement * 1.07)} (com juros)

üí° **Pr√≥ximos passos:**
1. Defina objetivos espec√≠ficos
2. Crie cronograma detalhado
3. Monitore progresso mensal
4. Ajuste estrat√©gia conforme necess√°rio"""
        
        elif 'or√ßamento' in intents:
            return f"""üìã **CRIA√á√ÉO DE OR√áAMENTO INTELIGENTE**

üìä **Baseado nos seus dados:**
‚Ä¢ Receita mensal: {format_currency(income)}
‚Ä¢ Despesa atual: {format_currency(expense)}
‚Ä¢ Saldo: {format_currency(balance)}

üéØ **OR√áAMENTO RECOMENDADO (Regra 50/30/20):**

**50% - NECESSIDADES ({format_currency(income * 0.5)}):**
‚Ä¢ Moradia: {format_currency(income * 0.25)}
‚Ä¢ Alimenta√ß√£o: {format_currency(income * 0.15)}
‚Ä¢ Transporte: {format_currency(income * 0.05)}
‚Ä¢ Sa√∫de: {format_currency(income * 0.05)}

**30% - DESEJOS ({format_currency(income * 0.3)}):**
‚Ä¢ Lazer: {format_currency(income * 0.15)}
‚Ä¢ Compras: {format_currency(income * 0.10)}
‚Ä¢ Assinaturas: {format_currency(income * 0.05)}

**20% - POUPAN√áA/INVESTIMENTO ({format_currency(income * 0.2)}):**
‚Ä¢ Fundo de emerg√™ncia: {format_currency(income * 0.10)}
‚Ä¢ Investimentos: {format_currency(income * 0.10)}

üí° **Dicas para seguir o or√ßamento:**
‚Ä¢ Use aplicativos de controle
‚Ä¢ Revise semanalmente
‚Ä¢ Ajuste conforme necess√°rio
‚Ä¢ Celebre pequenas conquistas"""
        
        elif 'emerg√™ncia' in intents:
            emergency_fund_needed = expense * 6  # 6 meses de despesas
            
            return f"""üö® **FUNDO DE EMERG√äNCIA**

üìä **Sua situa√ß√£o:**
‚Ä¢ Despesas mensais: {format_currency(expense)}
‚Ä¢ Fundo necess√°rio: {format_currency(emergency_fund_needed)} (6 meses)
‚Ä¢ Fundo atual: {format_currency(balance)}
‚Ä¢ Status: {'‚ùå Insuficiente' if balance < emergency_fund_needed else '‚úÖ Adequado'}

üéØ **PLANO PARA CRIAR FUNDO DE EMERG√äNCIA:**

**META 1 ({format_currency(emergency_fund_needed * 0.25)}):**
‚Ä¢ Economize {format_currency(emergency_fund_needed * 0.25 / 3)}/m√™s por 3 meses
‚Ä¢ Corte gastos n√£o essenciais
‚Ä¢ Use b√¥nus/13¬∫ sal√°rio

**META 2 ({format_currency(emergency_fund_needed * 0.5)}):**
‚Ä¢ Economize {format_currency(emergency_fund_needed * 0.25 / 3)}/m√™s por mais 3 meses
‚Ä¢ Busque renda extra
‚Ä¢ Automatize transfer√™ncias

**META 3 ({format_currency(emergency_fund_needed)}):**
‚Ä¢ Complete o fundo
‚Ä¢ Mantenha em conta separada
‚Ä¢ Revise anualmente

üí° **Onde guardar:**
‚Ä¢ Conta poupan√ßa (liquidez)
‚Ä¢ CDB de bancos digitais
‚Ä¢ Tesouro SELIC

‚ö†Ô∏è **Importante:** S√≥ use para emerg√™ncias reais!"""
        
        elif 'aposentadoria' in intents:
            age_estimate = 25
            retirement_age = 65
            years_to_retirement = retirement_age - age_estimate
            monthly_savings_needed = (income * 0.7 * 12 * 20) / (years_to_retirement * 12)  # Para manter 70% da renda por 20 anos
            
            return f"""üèñÔ∏è **PLANEJAMENTO PARA APOSENTADORIA**

üìä **An√°lise atual:**
‚Ä¢ Idade: {age_estimate} anos
‚Ä¢ Tempo at√© aposentadoria: {years_to_retirement} anos
‚Ä¢ Poupan√ßa mensal atual: {format_currency(income * savings_rate / 100)}
‚Ä¢ Poupan√ßa necess√°ria: {format_currency(monthly_savings_needed)}/m√™s

üéØ **ESTRAT√âGIA DE APOSENTADORIA:**

**FASE 1 (Agora - 10 anos):**
‚Ä¢ Foque em crescimento de renda
‚Ä¢ Poupe 15-20% da renda
‚Ä¢ Invista em educa√ß√£o/capacita√ß√£o

**FASE 2 (10-20 anos):**
‚Ä¢ Aumente poupan√ßa para 25-30%
‚Ä¢ Diversifique investimentos
‚Ä¢ Considere im√≥veis para renda

**FASE 3 (20+ anos):**
‚Ä¢ Maximize contribui√ß√µes
‚Ä¢ Planeje transi√ß√£o gradual
‚Ä¢ Considere aposentadoria parcial

üí∞ **Investimentos recomendados:**
‚Ä¢ **A√ß√µes:** 60% (crescimento)
‚Ä¢ **Renda fixa:** 30% (seguran√ßa)
‚Ä¢ **Im√≥veis:** 10% (diversifica√ß√£o)

üí° **Dica:** Quanto mais cedo come√ßar, melhor!"""
        
        elif 'im√≥vel' in intents or 'casa' in intents:
            down_payment_needed = income * 12 * 0.2  # 20% de entrada
            max_house_price = income * 3  # 3x a renda anual
            
            return f"""üè† **PLANEJAMENTO PARA COMPRA DE IM√ìVEL**

üìä **An√°lise baseada na sua renda:**
‚Ä¢ Renda mensal: {format_currency(income)}
‚Ä¢ Entrada necess√°ria: {format_currency(down_payment_needed)} (20%)
‚Ä¢ Valor m√°ximo recomendado: {format_currency(max_house_price)}
‚Ä¢ Poupan√ßa atual: {format_currency(balance)}

üéØ **ROTEIRO PARA COMPRA:**

**FASE 1 - PREPARA√á√ÉO (6-12 meses):**
‚Ä¢ Economize {format_currency(down_payment_needed / 12)}/m√™s para entrada
‚Ä¢ Melhore score de cr√©dito
‚Ä¢ Pesquise regi√µes de interesse

**FASE 2 - BUSCA (3-6 meses):**
‚Ä¢ Defina crit√©rios (localiza√ß√£o, tamanho, pre√ßo)
‚Ä¢ Visite im√≥veis
‚Ä¢ Compare op√ß√µes

**FASE 3 - NEGOCIA√á√ÉO:**
‚Ä¢ Fa√ßa proposta
‚Ä¢ Negocie condi√ß√µes
‚Ä¢ Contrate financiamento

üí° **Dicas importantes:**
‚Ä¢ N√£o comprometa mais de 30% da renda
‚Ä¢ Considere custos extras (IPTU, condom√≠nio)
‚Ä¢ Mantenha fundo de emerg√™ncia
‚Ä¢ Avalie se √© melhor comprar ou alugar

‚ö†Ô∏è **C√°lculo:** Renda {format_currency(income)} ‚Üí Financiamento m√°ximo {format_currency(income * 0.3 * 12 * 30)}"""
        
        elif 'educa√ß√£o' in intents:
            return f"""üìö **INVESTIMENTO EM EDUCA√á√ÉO**

üìä **An√°lise de retorno sobre investimento:**
‚Ä¢ Educa√ß√£o √© o melhor investimento
‚Ä¢ Retorno m√©dio: 10-15% ao ano
‚Ä¢ Impacto na renda: +20-50%

üéØ **ESTRAT√âGIAS DE INVESTIMENTO EM EDUCA√á√ÉO:**

**1. FORMA√á√ÉO ACAD√äMICA:**
‚Ä¢ Gradua√ß√£o: {format_currency(500)}-{format_currency(2000)}/m√™s
‚Ä¢ P√≥s-gradua√ß√£o: {format_currency(800)}-{format_currency(3000)}/m√™s
‚Ä¢ Cursos t√©cnicos: {format_currency(200)}-{format_currency(800)}/m√™s

**2. CURSOS PROFISSIONALIZANTES:**
‚Ä¢ Programa√ß√£o: {format_currency(100)}-{format_currency(500)}/m√™s
‚Ä¢ Design: {format_currency(150)}-{format_currency(600)}/m√™s
‚Ä¢ Marketing: {format_currency(100)}-{format_currency(400)}/m√™s
‚Ä¢ L√≠nguas: {format_currency(200)}-{format_currency(800)}/m√™s

**3. CERTIFICA√á√ïES:**
‚Ä¢ Certifica√ß√µes t√©cnicas: {format_currency(500)}-{format_currency(3000)}
‚Ä¢ Certifica√ß√µes profissionais: {format_currency(1000)}-{format_currency(5000)}
‚Ä¢ Cursos online: {format_currency(50)}-{format_currency(300)}

üí° **Dicas para maximizar retorno:**
‚Ä¢ Escolha √°reas com alta demanda
‚Ä¢ Combine teoria com pr√°tica
‚Ä¢ Networking √© fundamental
‚Ä¢ Mantenha-se atualizado

üí∞ **Meta:** Investir 5-10% da renda em educa√ß√£o"""
        
        elif 'seguro' in intents:
            return f"""üõ°Ô∏è **PROTE√á√ÉO FINANCEIRA COM SEGUROS**

üìä **An√°lise de necessidades:**
‚Ä¢ Renda mensal: R$ {income:.2f}
‚Ä¢ Dependentes: Considere sua situa√ß√£o familiar
‚Ä¢ Patrim√¥nio: Avalie seus bens

üéØ **SEGUROS ESSENCIAIS:**

**1. SEGURO DE VIDA (R$ {income * 12 * 5:.0f}):**
‚Ä¢ Cobertura: 5x a renda anual
‚Ä¢ Custo: R$ {income * 0.02:.2f}/m√™s
‚Ä¢ Protege fam√≠lia em caso de falecimento

**2. SEGURO DE SA√öDE:**
‚Ä¢ Cobertura: Hospitalar + Ambulatorial
‚Ä¢ Custo: R$ {income * 0.05:.2f}/m√™s
‚Ä¢ Evita gastos inesperados

**3. SEGURO AUTO (se aplic√°vel):**
‚Ä¢ Cobertura: Terceiros + Roubo/Furto
‚Ä¢ Custo: {format_currency(100)}-{format_currency(300)}/m√™s
‚Ä¢ Protege contra preju√≠zos

**4. SEGURO RESIDENCIAL:**
‚Ä¢ Cobertura: Inc√™ndio + Roubo
‚Ä¢ Custo: {format_currency(50)}-{format_currency(150)}/m√™s
‚Ä¢ Protege patrim√¥nio

üí° **Dicas:**
‚Ä¢ Compare pre√ßos e coberturas
‚Ä¢ Revise anualmente
‚Ä¢ N√£o pague por coberturas desnecess√°rias
‚Ä¢ Mantenha franquias adequadas

‚ö†Ô∏è **Prioridade:** Vida > Sa√∫de > Auto > Residencial"""
        
        elif 'imposto' in intents:
            return f"""üí∞ **OTIMIZA√á√ÉO FISCAL (Brasil)**

üìä **Sua situa√ß√£o:**
‚Ä¢ Renda mensal: {format_currency(income)}
‚Ä¢ Renda anual: {format_currency(income * 12)}
‚Ä¢ Faixa de IR: {'Isento' if income * 12 < 2259.20 else '7.5%' if income * 12 < 2826.65 else '15%' if income * 12 < 3751.05 else '22.5%' if income * 12 < 4664.68 else '27.5%'}

üéØ **ESTRAT√âGIAS DE ECONOMIA FISCAL:**

**1. DEDU√á√ïES PERMITIDAS:**
‚Ä¢ Previd√™ncia privada: at√© 12% da renda
‚Ä¢ Educa√ß√£o: at√© {format_currency(3561.50)}/ano
‚Ä¢ Sa√∫de: sem limite
‚Ä¢ Dependentes: {format_currency(2275.08)} por dependente

**2. REGRAS DE TRIBUTA√á√ÉO E ISEN√á√ïES (principais):**
‚Ä¢ Poupan√ßa: isenta de IR (PF)
‚Ä¢ LCI/LCA: isentas de IR (PF)
‚Ä¢ Tesouro Direto (Selic, IPCA+, Prefixado): tributado pela tabela regressiva (15% a 22,5%)
‚Ä¢ A√ß√µes: opera√ß√µes comuns isentas at√© R$ 20.000/m√™s em vendas; day-trade sempre tributado

**3. DECLARA√á√ÉO ANUAL:**
‚Ä¢ Mantenha todos os comprovantes
‚Ä¢ Use software oficial
‚Ä¢ Declare at√© 30/04
‚Ä¢ Evite multas

üí° **Dicas para economizar:**
‚Ä¢ Use previd√™ncia privada
‚Ä¢ Invista em educa√ß√£o
‚Ä¢ Mantenha controle de gastos
‚Ä¢ Consulte um contador

‚ö†Ô∏è **Importante:** Sempre declare corretamente!"""
        
        elif 'viagem' in intents:
            # Calcular or√ßamento de viagem baseado na renda
            travel_budget = income * 0.15  # 15% da renda para viagem
            months_to_save = 6  # 6 meses para economizar
            
            return f"""‚úàÔ∏è **PLANEJAMENTO DE VIAGEM INTELIGENTE**

üìä **An√°lise baseada na sua renda:**
‚Ä¢ Renda mensal: {format_currency(income)}
‚Ä¢ Or√ßamento recomendado: {format_currency(travel_budget)} (15% da renda)
‚Ä¢ Tempo para economizar: {months_to_save} meses
‚Ä¢ Economia mensal necess√°ria: {format_currency(travel_budget / months_to_save)}

üéØ **ESTRAT√âGIA DE VIAGEM:**

**1. DESTINOS POR OR√áAMENTO:**
‚Ä¢ **Econ√¥mico ({format_currency(travel_budget * 0.5)}):** Praias nacionais, cidades hist√≥ricas
‚Ä¢ **Moderado ({format_currency(travel_budget)}):** Destinos internacionais pr√≥ximos
‚Ä¢ **Premium ({format_currency(travel_budget * 1.5)}):** Europa, EUA, √Åsia

**2. DISTRIBUI√á√ÉO DO OR√áAMENTO:**
‚Ä¢ Passagens: 40% ({format_currency(travel_budget * 0.4)})
‚Ä¢ Hospedagem: 30% ({format_currency(travel_budget * 0.3)})
‚Ä¢ Alimenta√ß√£o: 20% ({format_currency(travel_budget * 0.2)})
‚Ä¢ Passeios: 10% ({format_currency(travel_budget * 0.1)})

**3. DICAS PARA ECONOMIZAR:**
‚Ä¢ Compre passagens com anteced√™ncia (3-6 meses)
‚Ä¢ Use sites de compara√ß√£o de pre√ßos
‚Ä¢ Considere hospedagem compartilhada
‚Ä¢ Viaje na baixa temporada
‚Ä¢ Use cart√µes de cr√©dito com milhas

üí° **Plano de a√ß√£o:**
‚Ä¢ Economize {format_currency(travel_budget / months_to_save)}/m√™s
‚Ä¢ Pesquise destinos e pre√ßos
‚Ä¢ Reserve com anteced√™ncia
‚Ä¢ Mantenha fundo de emerg√™ncia

‚ö†Ô∏è **Lembre-se:** Viagem √© investimento em experi√™ncias, mas n√£o comprometa sua seguran√ßa financeira!"""
        
        elif 'carro' in intents:
            # An√°lise para compra de carro
            car_budget = income * 0.3  # 30% da renda para carro
            down_payment = car_budget * 0.2  # 20% de entrada
            monthly_payment = (car_budget * 0.8) / 60  # Financiamento em 60 meses
            
            return f"""üöó **PLANEJAMENTO PARA COMPRA DE CARRO**

üìä **An√°lise financeira:**
‚Ä¢ Renda mensal: {format_currency(income)}
‚Ä¢ Valor m√°ximo recomendado: {format_currency(car_budget)}
‚Ä¢ Entrada necess√°ria: {format_currency(down_payment)} (20%)
‚Ä¢ Parcela mensal: {format_currency(monthly_payment)} (60 meses)
‚Ä¢ Impacto na renda: {(monthly_payment/income*100):.1f}%

üéØ **ESTRAT√âGIA DE COMPRA:**

**1. PREPARA√á√ÉO (3-6 meses):**
‚Ä¢ Economize R$ {down_payment / 6:.2f}/m√™s para entrada
‚Ä¢ Melhore score de cr√©dito
‚Ä¢ Pesquise modelos e pre√ßos
‚Ä¢ Calcule custos totais (IPVA, seguro, manuten√ß√£o)

**2. OP√á√ïES POR OR√áAMENTO:**
‚Ä¢ **Econ√¥mico (R$ {car_budget * 0.6:.2f}):** Carros usados, modelos b√°sicos
‚Ä¢ **Intermedi√°rio (R$ {car_budget:.2f}):** Carros seminovos, modelos populares
‚Ä¢ **Premium (R$ {car_budget * 1.4:.2f}):** Carros novos, modelos superiores

**3. CUSTOS ADICIONAIS:**
‚Ä¢ IPVA: {format_currency(car_budget * 0.03)}/ano
‚Ä¢ Seguro: {format_currency(car_budget * 0.05)}/m√™s
‚Ä¢ Manuten√ß√£o: {format_currency(car_budget * 0.02)}/m√™s
‚Ä¢ Combust√≠vel: {format_currency(300)}-{format_currency(600)}/m√™s

**4. ALTERNATIVAS:**
‚Ä¢ **Comprar √† vista:** Economia de juros
‚Ä¢ **Financiamento:** Maior poder de compra
‚Ä¢ **Leasing:** Menos responsabilidade
‚Ä¢ **Compartilhamento:** Economia total

üí° **Dicas importantes:**
‚Ä¢ N√£o comprometa mais de 30% da renda
‚Ä¢ Considere custos de manuten√ß√£o
‚Ä¢ Compare diferentes op√ß√µes de financiamento
‚Ä¢ Avalie se realmente precisa de um carro

‚ö†Ô∏è **C√°lculo:** Renda {format_currency(income)} ‚Üí Carro m√°ximo {format_currency(car_budget)} ‚Üí Parcela {format_currency(monthly_payment)}"""
        
        elif 'neg√≥cio' in intents:
            # An√°lise para empreendedorismo
            business_capital = income * 6  # 6 meses de renda como capital inicial
            monthly_investment = income * 0.1  # 10% da renda para investir no neg√≥cio
            
            return f"""üíº **PLANEJAMENTO PARA ABRIR NEG√ìCIO**

üìä **An√°lise empreendedora:**
‚Ä¢ Renda atual: {format_currency(income)}
‚Ä¢ Capital inicial recomendado: {format_currency(business_capital)} (6 meses de renda)
‚Ä¢ Investimento mensal: {format_currency(monthly_investment)} (10% da renda)
‚Ä¢ Tempo para acumular capital: {business_capital / monthly_investment:.0f} meses

üéØ **ESTRAT√âGIA EMPREENDEDORA:**

**1. PREPARA√á√ÉO FINANCEIRA:**
‚Ä¢ Mantenha emprego atual por 6-12 meses
‚Ä¢ Economize R$ {monthly_investment:.2f}/m√™s
‚Ä¢ Crie fundo de emerg√™ncia de 12 meses
‚Ä¢ Reduza d√≠vidas ao m√≠nimo

**2. OP√á√ïES DE NEG√ìCIO POR INVESTIMENTO:**
‚Ä¢ **Baixo investimento ({format_currency(business_capital * 0.3)}):** E-commerce, consultoria, freelancing
‚Ä¢ **M√©dio investimento ({format_currency(business_capital)}):** Loja f√≠sica pequena, franquia, importa√ß√£o
‚Ä¢ **Alto investimento ({format_currency(business_capital * 2)}):** Restaurante, cl√≠nica, ind√∫stria

**3. ESTRUTURA FINANCEIRA:**
‚Ä¢ **Capital inicial:** R$ {business_capital * 0.4:.2f} (40%)
‚Ä¢ **Capital de giro:** R$ {business_capital * 0.3:.2f} (30%)
‚Ä¢ **Marketing:** R$ {business_capital * 0.2:.2f} (20%)
‚Ä¢ **Reserva:** R$ {business_capital * 0.1:.2f} (10%)

**4. PLANO DE A√á√ÉO:**
‚Ä¢ **M√™s 1-3:** Pesquisa de mercado e planejamento
‚Ä¢ **M√™s 4-6:** Acumula√ß√£o de capital
‚Ä¢ **M√™s 7-9:** Implementa√ß√£o e testes
‚Ä¢ **M√™s 10+:** Opera√ß√£o e crescimento

üí° **Dicas para sucesso:**
‚Ä¢ Comece pequeno e cres√ßa gradualmente
‚Ä¢ Mantenha renda alternativa
‚Ä¢ Controle rigorosamente os custos
‚Ä¢ Foque na diferencia√ß√£o
‚Ä¢ Construa uma rede de contatos

‚ö†Ô∏è **Importante:** Empreendedorismo √© arriscado, mas pode ser muito lucrativo com planejamento adequado!"""
        
        else:
            # Resposta gen√©rica SUPER INTELIGENTE e compreensiva para qualquer pergunta
            if is_emotional:
                return f"""{emoji_prefix} **FICA TRANQUILO! EU VOU TE AJUDAR!**

üòä **N√£o se preocupe em perguntar "corretamente" - eu entendo tudo!**

üìä **Vamos ver sua situa√ß√£o:**
‚Ä¢ Receitas: {format_currency(income)}
‚Ä¢ Despesas: {format_currency(expense)}
‚Ä¢ Saldo: {format_currency(balance)}
‚Ä¢ Taxa de poupan√ßa: {savings_rate:.1f}%

üéØ **DIAGN√ìSTICO R√ÅPIDO:**
{'üö® **CR√çTICO:** Saldo negativo - vamos resolver isso!' if balance < 0 else '‚úÖ **SAUD√ÅVEL:** Continue assim!'}
{'‚ö†Ô∏è **ATEN√á√ÉO:** Maior gasto compromete muito da renda' if top_expenses and top_expenses[0][1] > income * 0.3 else '‚úÖ **EQUILIBRADO:** Gastos bem distribu√≠dos'}

üí° **PERGUNTE DE QUALQUER JEITO:**

**üí∞ POUPAN√áA:**
‚Ä¢ "t√¥ gastando muito" / "n√£o consigo economizar" / "dinheiro n√£o sobra"
‚Ä¢ "t√¥ no vermelho" / "t√¥ quebrado" / "sem dinheiro"

**üìà INVESTIMENTOS:**
‚Ä¢ "onde colocar dinheiro?" / "fazer dinheiro render" / "multiplicar dinheiro"
‚Ä¢ "onde investir?" / "melhor aplica√ß√£o" / "dinheiro trabalhando"

**üí≥ D√çVIDAS:**
‚Ä¢ "t√¥ endividado" / "cart√£o estourou" / "t√¥ devendo"
‚Ä¢ "como quitar cart√£o?" / "pagar d√≠vidas" / "t√¥ no sufoco"

**üíº RENDA:**
‚Ä¢ "quero ganhar mais" / "sal√°rio baixo" / "ganho pouco"
‚Ä¢ "renda extra" / "trabalho extra" / "bico"

**üìâ GASTOS:**
‚Ä¢ "gasto demais" / "t√¥ gastando muito" / "cortar gastos"
‚Ä¢ "reduzir despesas" / "onde cortar" / "otimizar gastos"

**üéØ PLANEJAMENTO:**
‚Ä¢ "n√£o sei o que fazer" / "t√¥ perdido" / "por onde come√ßar"
‚Ä¢ "primeiro passo" / "o que fazer primeiro" / "come√ßar"

**ü§î D√öVIDAS:**
‚Ä¢ "me ajuda" / "t√¥ confuso" / "n√£o entendo"
‚Ä¢ "socorro" / "ajuda" / "d√∫vida"

üí™ **EXEMPLOS DE PERGUNTAS QUE FUNCIONAM:**
‚Ä¢ "t√¥ na merda, o que fa√ßo?"
‚Ä¢ "t√¥ fudido com dinheiro"
‚Ä¢ "t√¥ lascado financeiramente"
‚Ä¢ "t√¥ ferrado, me ajuda"
‚Ä¢ "t√¥ na pinda√≠ba"
‚Ä¢ "t√¥ no sufoco"
‚Ä¢ "t√¥ no aperto"
‚Ä¢ "t√¥ apertado"
‚Ä¢ "t√¥ quebrado"
‚Ä¢ "sem dinheiro"
‚Ä¢ "falta dinheiro"

üéØ **RECOMENDA√á√ÉO ESPEC√çFICA PARA VOC√ä:**
{'üö® **URGENTE:** Corte gastos e busque renda extra AGORA!' if balance < 0 else '‚úÖ **CONTINUE:** Mantenha disciplina e diversifique!'}

üí¨ **Dica:** Seja natural! Fale como voc√™ fala mesmo. A IA entende g√≠rias, palavr√µes, linguagem informal... Tudo! üòÑ

**A IA est√° aqui para te ajudar, n√£o importa como voc√™ pergunte!** üöÄ"""
            else:
                return f"""ü§ñ **CONSELHEIRO IA SUPER INTELIGENTE - AN√ÅLISE COMPLETA E PERSONALIZADA**

üìä **RESUMO FINANCEIRO PERSONALIZADO:**
‚Ä¢ Receitas: {format_currency(income)}
‚Ä¢ Despesas: {format_currency(expense)}
‚Ä¢ Saldo: {format_currency(balance)}
‚Ä¢ Taxa de poupan√ßa: {savings_rate:.1f}%
‚Ä¢ Maior gasto: {top_expenses[0][0] if top_expenses else 'N/A'} - {format_currency(top_expenses[0][1] if top_expenses else 0)}
‚Ä¢ Tend√™ncia: {'üìà Positiva' if income > expense else 'üìâ Negativa' if expense > income else 'üìä Est√°vel'}

üéØ **DIAGN√ìSTICO FINANCEIRO DETALHADO:**
‚Ä¢ {'üö® CR√çTICO: Saldo negativo - priorize estabilizar' if balance < 0 else '‚úÖ SAUD√ÅVEL: Continue poupando e invista'}
‚Ä¢ {'‚ö†Ô∏è ATEN√á√ÉO: Maior gasto compromete ' + f"{(top_expenses[0][1]/income*100):.1f}%" if top_expenses and top_expenses[0][1] > income * 0.3 else '‚úÖ EQUILIBRADO: Gastos bem distribu√≠dos'}
‚Ä¢ {'üìà OPORTUNIDADE: Renda baixa - busque crescimento' if income < 5000 else '‚úÖ EST√ÅVEL: Renda adequada'}

üîÆ **IA PREDITIVA AVAN√áADA:**
‚Ä¢ {'üö® Risco alto: Precisa de interven√ß√£o imediata' if balance < 0 else '‚úÖ Baixo risco: Continue no caminho certo'}
‚Ä¢ {'üìà Alto potencial: Foque em aumentar renda' if income < 5000 else 'üìä Potencial moderado: Otimize gastos'}
‚Ä¢ {'üí° Oportunidade: Reduza ' + top_expenses[0][0] if top_expenses and top_expenses[0][1] > income * 0.25 else 'üí° Oportunidade: Diversifique investimentos'}

üí° **COMO POSSO TE AJUDAR? PERGUNTE DE QUALQUER FORMA:**

**üí∞ POUPAN√áA E ECONOMIA:**
‚Ä¢ "como economizar mais?" / "onde guardar dinheiro?" / "t√¥ gastando muito"
‚Ä¢ "n√£o consigo economizar" / "como poupar dinheiro?" / "onde guardar?"

**üìà INVESTIMENTOS:**
‚Ä¢ "onde investir?" / "melhor aplica√ß√£o para mim?" / "onde colocar dinheiro?"
‚Ä¢ "como investir?" / "melhor investimento?" / "onde aplicar dinheiro?"

**üí≥ D√çVIDAS:**
‚Ä¢ "como pagar d√≠vidas?" / "melhor forma de quitar cart√£o?" / "t√¥ endividado"
‚Ä¢ "como quitar cart√£o?" / "pagar empr√©stimo" / "quitar d√≠vidas"

**üíº RENDA:**
‚Ä¢ "como aumentar renda?" / "renda extra?" / "quero ganhar mais"
‚Ä¢ "como ganhar mais dinheiro?" / "aumentar sal√°rio" / "renda adicional"

**üìâ GASTOS:**
‚Ä¢ "como reduzir gastos?" / "onde cortar despesas?" / "gastar menos"
‚Ä¢ "cortar gastos" / "reduzir despesas" / "otimizar gastos"

**üéØ PLANEJAMENTO:**
‚Ä¢ "planejamento financeiro" / "metas financeiras" / "n√£o sei o que fazer"
‚Ä¢ "criar plano" / "estrat√©gia financeira" / "objetivos financeiros"

**üìã OR√áAMENTO:**
‚Ä¢ "como fazer or√ßamento?" / "controle financeiro" / "organizar dinheiro"
‚Ä¢ "gerenciar dinheiro" / "administrar finan√ßas" / "controle de gastos"

**üö® EMERG√äNCIA:**
‚Ä¢ "fundo de emerg√™ncia" / "reserva financeira" / "imprevistos"
‚Ä¢ "dinheiro para emerg√™ncia" / "reserva de emerg√™ncia"

**üèñÔ∏è APOSENTADORIA:**
‚Ä¢ "planejamento aposentadoria" / "previd√™ncia" / "futuro"
‚Ä¢ "aposentadoria" / "planejamento futuro" / "terceira idade"

**üè† IM√ìVEL:**
‚Ä¢ "comprar casa" / "financiamento im√≥vel" / "comprar apartamento"
‚Ä¢ "entrada casa" / "financiamento casa" / "comprar im√≥vel"

**üìö EDUCA√á√ÉO:**
‚Ä¢ "investir em educa√ß√£o" / "cursos e forma√ß√£o" / "estudar"
‚Ä¢ "faculdade" / "universidade" / "forma√ß√£o profissional"

**üõ°Ô∏è SEGURO:**
‚Ä¢ "preciso de seguro?" / "prote√ß√£o financeira" / "seguro de vida"
‚Ä¢ "qual seguro?" / "seguro de sa√∫de" / "seguro de carro"

**üí∞ IMPOSTOS:**
‚Ä¢ "economizar impostos" / "otimiza√ß√£o fiscal" / "imposto de renda"
‚Ä¢ "declara√ß√£o" / "dedu√ß√£o" / "economizar imposto"

**‚úàÔ∏è VIAGEM:**
‚Ä¢ "planejar viagem" / "economizar para viajar" / "f√©rias"
‚Ä¢ "turismo" / "passeio" / "destino"

**üöó CARRO:**
‚Ä¢ "comprar carro" / "financiamento autom√≥vel" / "entrada carro"
‚Ä¢ "comprar autom√≥vel" / "financiamento carro"

**üíº NEG√ìCIO:**
‚Ä¢ "abrir empresa" / "empreendedorismo" / "abrir neg√≥cio"
‚Ä¢ "startup" / "empreender" / "com√©rcio"

**ü§î D√öVIDAS GERAIS:**
‚Ä¢ "me ajuda" / "t√¥ perdido" / "t√¥ confuso" / "n√£o entendo"
‚Ä¢ "explique" / "d√∫vida" / "socorro" / "ajuda"

üéØ **RECOMENDA√á√ïES ESPEC√çFICAS PARA VOC√ä:**
‚Ä¢ {'üö® URGENTE: Corte gastos n√£o essenciais e busque renda extra' if balance < 0 else '‚úÖ CONTINUE: Mantenha disciplina e diversifique investimentos'}
‚Ä¢ {'‚ö†Ô∏è FOQUE: Reduza ' + top_expenses[0][0] + ' em 20%' if top_expenses and top_expenses[0][1] > income * 0.3 else '‚úÖ OTIMIZE: Busque aumentar taxa de poupan√ßa para 25%'}
‚Ä¢ {'üìà PRIORIZE: Desenvolva habilidades para aumentar renda' if income < 5000 else 'üìä MANTENHA: Continue diversificando fontes de renda'}

üí¨ **Dica:** N√£o se preocupe em perguntar "corretamente"! A IA entende linguagem informal, g√≠rias e at√© perguntas mal formuladas. Seja natural e eu vou te ajudar! üöÄ

**Exemplos de perguntas que funcionam:**
‚Ä¢ "t√¥ gastando muito, o que fa√ßo?"
‚Ä¢ "n√£o consigo economizar"
‚Ä¢ "quero ganhar mais dinheiro"
‚Ä¢ "t√¥ perdido com minhas finan√ßas"
‚Ä¢ "me ajuda com dinheiro"
‚Ä¢ "n√£o sei o que fazer"

A IA est√° pronta para entender e ajudar com qualquer aspecto das suas finan√ßas! üí™"""
    
    # Perfil de IA por usu√°rio (aprendizado)
    profile = get_or_create_ai_profile(current_user.id)

    # Processar a pergunta
    intents = analyze_question_intent(question)
    entities = extract_entities_from_question(question_original)
    # Gloss√°rio: detectar termos conhecidos
    glossary_hits = []
    norm_original = normalize_text(question_original)
    for term in FIN_GLOSSARY.keys():
        if term in norm_original:
            glossary_hits.append(term)
    user_data = {
        'income': current_income,
        'expense': current_expense,
        'balance': current_balance,
        'savings_rate': savings_rate,
        'top_expenses': top_expenses
    }

    response_core = generate_intelligent_response(question, intents, user_data, entities, profile, glossary_hits)

    # Montar resposta conforme modo
    summary_for_clarity = {
        'income': current_income,
        'expense': current_expense,
        'balance': current_balance,
        'savings_rate': savings_rate,
    }
    if mode == 'direto':
        # Entrega somente o n√∫cleo, sem TL;DR/Checklist/Gloss√°rio
        response = response_core
    elif mode == 'compacto':
        # N√∫cleo + TL;DR curto
        short = enrich_response_for_clarity(response_core, summary_for_clarity, intents, entities, profile, glossary_hits)
        # Reduz para as primeiras se√ß√µes (TL;DR + corpo)
        parts = short.split('\n')
        cutoff = min(len(parts), 40)
        response = '\n'.join(parts[:cutoff])
    elif mode == 'especialista':
        # Did√°tico + refor√ßo t√©cnico: adiciona nota de riscos e compliance
        did = enrich_response_for_clarity(response_core, summary_for_clarity, intents, entities, profile, glossary_hits)
        expert_note = [
            "",
            "üß™ Nota t√©cnica (especialista):",
            "- Considere risco de liquidez, marca√ß√£o a mercado e adequa√ß√£o ao perfil regulat√≥rio.",
            "- Diversifique emissores e classes; acompanhe CDI/SELIC/IPCA e calend√°rio tribut√°rio.",
        ]
        response = did + "\n" + "\n".join(expert_note)
    else:  # didatico (default)
        response = enrich_response_for_clarity(response_core, summary_for_clarity, intents, entities, profile, glossary_hits)

    # Atualizar perfil com base na intera√ß√£o (aprendizado incremental)
    try:
        update_profile_on_interaction(profile, intents, current_balance)
        db.session.add(AiInteraction(
            user_id=current_user.id,
            question=request.args.get('question', ''),
            intents_json=_dumps_json_safe(intents),
            response=response
        ))
        db.session.commit()
    except Exception:
        db.session.rollback()

    return jsonify({'response': response})

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=False, host='0.0.0.0', port=5000) 
